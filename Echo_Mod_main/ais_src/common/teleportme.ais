// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih

/*
Purpose:
Enables units to request or perform teleportation

Design:
    1. Units not near a teleporter must try to Skip-port
    2. Units near a Slipgate may teleport anywhere in a 200 sq radius
        or to any other Tport gate on the map, at 0 cost
    3. Units near & commanding a Teleporter may teleport anywhere in a 70 sq radius
        or to any other Tport gate on the map, at 0 cost
    4. Units near a Spyre may teleport to other Tport gates in a 120 sq radius,
        at 0 cost
    5. An Anchor can act as destination gate only
    6. Unlike vanilla Achron, units in this mod (mostly) only teleport under thier own power. The Teleporter controls the teleport rate through giving teleport approval with its hierarchy pointer. 

Logic flow:
    1. Verify that you are permitted to teleport and the destination is within range
    2. Check if there is a teleporter or slipgate nearby
    3. If a 'porter is NOT available
        1. attempt to self skip
        2. return to idle
    4. If 'porter is available, wait and ask for approval before 'porting
*/

// 0. Define Macros
//********************************************************************
#define SKIP_QP_COST if (uclass < 300) {\
        if (uclass < 45) { \
            if (uclass<$TANK_CLASS) { \
                if (uclass==$MARINE_CLASS||uclass==$MARINE_RAISED_CLASS) { qp = $MARINE_CPORT_QP; }\
                if (uclass==$SOP_CLASS || uclass==$SOP_RAISED_CLASS) { qp = $SOP_CPORT_QP; } \
                else { qp = $MECH_CPORT_QP; }  \
            } \
            else if (uclass==$TANK_CLASS) { qp = $TANK_CPORT_QP; } \
            else if (uclass==$TANK2_CLASS) { qp = $TANK2_CPORT_QP; } \
            else if (uclass==$MAR_CLASS) { qp = $MAR_CPORT_QP; } \
            else if (uclass==$MAR2_CLASS) { qp = $MAR2_CPORT_QP; } \
        } \
        else { \
            if (uclass==$ATHC_CLASS) { qp = $ATHC_CPORT_QP; } \
            else if (uclass>=$MFB_CLASS && uclass <=$HUMAN_ACHRON_CLASS) { \
                qp = $MFB_CPORT_QP; } \
            else if (uclass==$LANCER_CLASS) { qp = $LANCER_CPORT_QP; } \
            else if (uclass==$FRIGATE_CLASS) { qp = $FRIGATE_CPORT_QP; } \
            else if (uclass==$TORNADE_CLASS) { qp = $TORNADE_CPORT_QP; } \
            else if (uclass==$CRUISER_CLASS) { qp = $CRUISER_CPORT_QP; } \
            else if (uclass==$BLACKBIRD_CLASS) { qp = $BLACKBIRD_CPORT_QP; } \
            else if (uclass==$HUMAN_RP_CLASS || uclass==$HUMAN_RP_OFF_CLASS) { \
                qp = $H_RP_TPORT_QP; } \
            else if (uclass==$TETHER_CLASS) {qp = $TETHER_TPORT_QP; } \
            else if (uclass==$TELEPORTER_CLASS) {qp = $TPORTER_TPORT_QP; } \
            else if (uclass==$CHRONOPORTER_CLASS) {qp = $CPORTER_TPORT_QP; } \
        } \
    }  \
    else { \
        if (uclass==$OCTO_CLASS) { qp = $OCTO_CPORT_QP; } \
        else if (uclass>=$OCTOPOD_CLASS) { qp = $OCTOPOD_CPORT_QP; } \
        else if (uclass==$OCTOLIGO_CLASS) { qp = $OCTOLIGO_CPORT_QP; } \
        else if (uclass==$SEPI_CLASS) { qp = $SEPI_CPORT_QP; } \
        else if (uclass==$SEPIPOD_CLASS) { qp = $SEPIPOD_CPORT_QP; } \
        else if (uclass==$SEPILIGO_CLASS) { qp = $SEPILIGO_CPORT_QP; } \
        else if (uclass==$PHARO_CLASS) { qp = $PHARO_CPORT_QP; } \
        else if (uclass==$PHAROPOD_CLASS) { qp = $PHAROPOD_CPORT_QP; } \
        else if (uclass==$PHAROLIGO_CLASS || uclass==$PHAROLIGO_MOVING_CLASS) { qp = $PHAROLIGO_CPORT_QP; } \
        else if (uclass==$SCOUT_GUARDIAN_CLASS || uclass==$GREKIM_ACHRON_CLASS) { qp = $GREKIM_ACHRON_CLASS; } \
        else if (uclass==$GREKIM_RP_CLASS || uclass==$GREKIM_RP_OFF_CLASS) { qp = $G_RP_CPORT_QP; } \
    }


// 1. Verify that you are permitted to teleport
//********************************************************************
//TSSed units can't teleport. Don't waste time on it.
if (unit->IsStasis) { 
    $SAY_TELEPORT_TSS;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
	PERFORM SET_ADDITIONAL_PARAMS 0; //^^^
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM NOTHING;
}

//Check whether the objective is targeted to a unit or a location
int op = unit->ObjectiveParameters;
int pos = op;
int to_unit = 0;
if (op!=$INVALID_POSITION && op[$Zpos]==31) {
    to_unit = 1;
	target = op[0,16];
    pos = target->Position;
}

int airunit = 0;
if ($IS_AIR_UNIT) {
    airunit = 1;
    if (pos[$Zpos]==0) {
        PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;  //move to the spot above the position
        pos[$Zpos] = perf_ret[$Zpos];
    }
} else pos[$Zpos] = 0;

int goal_dist = unit <_> pos;

//If distance to destination is < 5, then there's no point in teleporting
if (goal_dist < 25) { 
    say "Already at destination";
	PERFORM SET_ADDITIONAL_PARAMS2 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM NOTHING;
}

// 2. Check if there is a Teleporter or Slipgate nearby 
//********************************************************************
#include common/include/unit_common_header.ais
object closesttport =  0;

if (AP_UNIT) { //already have a gate stored
    closesttport = ap[$STOREDUNIT];
    if (closesttport->IsAlive==1) {
		int ctr = closesttport.Rank;
		//clear it if the stored unit isn't a teleporter or slipgate or it's too far away
		if (!(ctr >=$TELEPORTER_RANK && ctr<= $SLIPGATE_RANK) ) { 
			ap[$UNIT_BIT] = 0;
			ap[$STOREDUNIT] = 0; //clear out the unit field
			PERFORM SET_ADDITIONAL_PARAMS ap;
			closesttport = 0;        
		}
	} else {//clear if the unit is dead
		ap[$UNIT_BIT] = 0;
		ap[$STOREDUNIT] = 0; //clear out the unit field
		PERFORM SET_ADDITIONAL_PARAMS ap;
		closesttport = 0;        
	}
    
    // Just waiting for our turn with a teleporter - let's not waste cpu time
    if (closesttport.Rank==$TELEPORTER_RANK && closesttport->Commander!=unit) {
        object altPorter = unit->NextSubordinate;
        while (altPorter > 0){
            if (altPorter.Rank==$TELEPORTER_RANK) {
                closesttport = altPorter;
                altPorter = 0;
            }
            else altPorter = unit->NextSubordinate;
        }
        if (closesttport->Commander!=unit) PERFORM NOTHING;
    }
}

//Look for a new 'porter
int qrank = 0;
if (closesttport==0) {   
	query_vis_distance = 26; // teleport radius
    
    //First choice is to look for Slipgates
    closesttport = QUERY UNIT [unit] MIN [ unit <=> query ] 
                   WHERE [ query.Rank==$SLIPGATE_RANK && query->IsAlly==1 && (query->Objective == 0) && !(query->Status & $FROZEN_COMMJAM) ];
                   
    //then for Teleportes
    if (closesttport==0)
    closesttport = QUERY UNIT [unit] MIN [ unit <=> query ] 
                   WHERE [ query.Rank==$TELEPORTER_RANK && query->IsAlly==1 && (query->Objective == 0) && !(query->Status & $FROZEN_COMMJAM) ];
                   
    //and Spyres last
    if (closesttport==0)
    closesttport = QUERY UNIT [unit] MIN [ unit <=> query ] 
                   WHERE [ query.Rank==$SPYRE_RANK && query->IsAlly==1 && (query->Objective == 0) && !(query->Status & $FROZEN_COMMJAM) ];
    
	query_vis_distance = -1;
}


//Check if whether the jump you want to make is within your 'porter's range
    // If your jump is not possible with a Slipgate or a Teleporter
    // then it is not remotely possible by any other means, so return to idle
if ( closesttport!=0 && to_unit ) {
    if ( target.Rank!=$SLIPGATE_RANK 
            && target.Rank!=$TETHER_RANK 
            && target.Rank!=$TELEPORTER_RANK 
            && target.Rank!=$SPYRE_RANK ) {
        to_unit = 0;
    }
}
if ( !to_unit && ((closesttport.Rank==$TELEPORTER_RANK && goal_dist>4900 )
        || (closesttport.Rank==$SLIPGATE_RANK && goal_dist>40000)) ) { 
    
    $SAY_TELEPORT;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM NOTHING;
}

    // But if the Spyre can't help us, we may still want to try Skipping
if ( closesttport.Rank==$SPYRE_RANK && (!to_unit || goal_dist>14400 ) ){
    closesttport =  0;
}

//save the 'porter we found to AP, so we don't have to search every time
    

// 3. If there isn't a 'porter nearby -> Attempt to self skip, then return to idle
//********************************************************************
if (closesttport==0 && ( 1 || player->Advancements[$HUMAN_ADV_GATE] || $IS_GREKIM ) ) {
            
    // check for sufficient Power
    if (player->$Power <= 0) {
        $SAY_POWER
        say " to skip teleport";
        PERFORM SET_ADDITIONAL_PARAMS2 0;
        PERFORM SET_ADDITIONAL_PARAMS 0;
        PERFORM SET_OBJECTIVE 0;
        PERFORM SET_PARAM 0;
        PERFORM NOTHING;
    }
    
    // check for sufficient QP
    int qp = 0;
    $SKIP_QP_COST

    if (player->$QPlasma < qp) {
        $SAY_QP
        say " to skip teleport";
        PERFORM SET_ADDITIONAL_PARAMS2 0;
        PERFORM SET_ADDITIONAL_PARAMS 0;
        PERFORM SET_OBJECTIVE 0;
        PERFORM SET_PARAM 0;
        PERFORM NOTHING;
    }

    // attempt to skip
    #include common/include/unit_skip_teleport_new.ais
    PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM SET_ADDITIONAL_PARAMS 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM NOTHING;
}

// 4. If there is a 'porter nearby -> wait for approval before 'porting
//********************************************************************
if ( closesttport ) {
    // Waiting for our turn with a teleporter
    if (closesttport.Rank==$TELEPORTER_RANK && closesttport->Commander!=unit) {
        object altPorter = unit->NextSubordinate;
        while (altPorter > 0){
            if (altPorter.Rank==$TELEPORTER_RANK) {
                closesttport = altPorter;
                altPorter = 0;
            }
            else altPorter = unit->NextSubordinate;
        }
        if (closesttport->Commander!=unit) PERFORM NOTHING;
    }
    
    //It's our turn to teleport!
    PERFORM $ACTION_SKIP pos;
    int tported = perf_ret;
    
    if ( tported > 0 ){
        // It worked! we can return to idle
        PERFORM SET_ADDITIONAL_PARAMS2 0;
        PERFORM SET_ADDITIONAL_PARAMS 0;
        PERFORM SET_OBJECTIVE 0;
        PERFORM SET_PARAM 0;
        PERFORM NOTHING;
    }

    //Ok, then the destination is probably blocked, see if we can find a spot nearby
    // that will work
    int unitPosition = unit->Position;
    int unitZ = unitPosition[$Zpos];
    int ulength = 3; //unit.Length;
    int mult = ulength+2;
    int xoffset = mult; 
    int yoffset = 0;
    int tportCounter = 0;
    int x = pos[$Xpos];
    int y = pos[$Ypos];
    
    //Try adjacent spots
    while (tported<1 && tportCounter<16) {
        tportCounter = tportCounter + 1;
        if (tportCounter==9) {
            mult = ulength+8; //More further!
            xoffset = mult; yoffset = 0;
        }
        pos[$Xpos] = x + xoffset;
        pos[$Ypos] = y + yoffset;
        
        if (airunit) {
            int targetZ = pos[$Zpos];
            if (targetZ == 0) {
                PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;
                pos[$Zpos] = unitZ |> perf_ret[$Zpos];
                //print unitZ ," trying : ", pos[$Xpos], " ", pos[$Ypos], " ", pos[$Zpos], "\n";
            } else {
            
                PERFORM IS_MAP_POSITION_VALID pos;
                if (perf_ret==0) {
                    PERFORM GET_MAP_NEXT_Z_POSITION_UP pos[0,24];
                    pos = perf_ret;
                }
            }
        }

        if (pos != unitPosition) {
            PERFORM $ACTION_SKIP pos;
            tported = perf_ret;  
        }

        if (xoffset > 0 && yoffset < 0) { yoffset = 0; mult=mult+ulength; xoffset = mult; } 
        else {
            if (xoffset <= 0 && yoffset < 0) { xoffset = xoffset + mult;  }
            if (xoffset < 0 && yoffset >= 0) { yoffset = yoffset - mult;  }
            if (xoffset >= 0 && yoffset > 0) { xoffset = xoffset - mult;  }
            if (xoffset > 0 && yoffset == 0) { yoffset = yoffset + mult;  } 
        }
        if (xoffset == 0 && yoffset == 0) { xoffset = xoffset + mult; }
    }
    
    if ( tported > 0 ){
        // It eventually worked! we can return to idle
        PERFORM SET_ADDITIONAL_PARAMS2 0;
        PERFORM SET_ADDITIONAL_PARAMS 0;
        PERFORM SET_OBJECTIVE 0;
        PERFORM SET_PARAM 0;
        PERFORM NOTHING;
    }
    
    // Nothing worked, time to cut our losses and give up
    $SAY_GATE; // HALP!!!
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM $ACTION_ERROR2;
}

//********************************************************************
//********************************************************************

/*vecgir vehicles can skip on their own once they are upgrade (their cap_bit 2 is set)
int UC = unit->Class;
if  (( UC >= 2015 && UC < 2060) || UC==$INCEPTER_CLASS || UC==$TYR_CARRIER_CLASS ) {
    if ( UC==$INCEPTER_CLASS || UC==$TYR_CARRIER_CLASS || unit->Status[$CAP_BIT_2] ){ //the vehicle is upgraded or its an incepter-class unit
        #include common/include/unit_halcyon_skip.ais
    }
}*/

//tss'd units can't chronoport. don't waste time on it
/*if (unit->IsStasis) { 
	PERFORM SET_ADDITIONAL_PARAMS2 0;
	PERFORM SET_ADDITIONAL_PARAMS 0; //^^^
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM NOTHING;
}*/




