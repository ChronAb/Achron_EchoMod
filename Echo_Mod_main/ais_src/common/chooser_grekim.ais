// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih

#define BOTTOM_RIGHT 1
#define TOP_RIGHT 2
#define TOP_LEFT 3
#define BOTTOM_LEFT 4

PERFORM GET_CUR_TIME;
int current = perf_ret;
int unitPosition = unit->Position;

//prevent interruption mid-objective
int myStatus = unit->Status;
if (myStatus[$CAP_BIT_1]) {
	PERFORM SET_OBJECTIVE 50; //choose human
	PERFORM NOTHING;
}
if (myStatus[$CAP_BIT_3]) {
	PERFORM SET_OBJECTIVE 52; //choose vecgir
	PERFORM NOTHING;
}

int uclass = unit->Class;

//LANDING PROBE
if (uclass==$LANDING_PROBE_CLASS) {
    int op = unit->ObjectiveParameters;
    op[$Zpos] = 0;
    if (op <_> unit > 36) { // Not in range yet, so move closer
        int dir = 0; 
        dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [query <_> op] WHERE [1];
        
        if (dir==0) {
            say "Path to target is obstructed";
            PERFORM SET_OBJECTIVE 0;
            PERFORM NOTHING;
        } else {
            PERFORM RAND;
            if (perf_ret < $LAD_CLEAR) {
                PERFORM CLEAR_LAST_ATTACKED_DIRECTION; 
            }
            PERFORM $ACTION_MOVE dir;
            PERFORM NOTHING;
        }
    } 
    
    // Place Grekim spawner
    PERFORM $ACTION_GREKIM0 op;
    PERFORM SET_OBJECTIVE 0;
    PERFORM NOTHING;
}

//(Old script. Might be useful someday.)
// IGNORE:
if (0 && uclass==$LANDING_PROBE_CLASS) {
    int op = unit->ObjectiveParameters;
    op[$Zpos] = 0;
    int ownerTeam = unit->Owner;
    
    /* Unit target:
    if (target!=$INVALID_POSITION && target[$Zpos]==0) {
        if (target->Class != $RACE_CHOOSER_CLASS) {
            say "Must target a designated Landing Site";
            PERFORM SET_OBJECTIVE 0;
            PERFORM NOTHING;
        }
        PERFORM $ACTION_GREKIM0 ownerTeam; //order grekim base
        PERFORM NOTHING;
    }*/
    
    // Location target:
    if (op <_> unit > 36) { // Not in range yet, so move closer
        int dir = 0; 
        dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [query <_> op] WHERE [1];
        
        if (dir==0) {
            say "Path to target is obstructed";
            PERFORM SET_OBJECTIVE 0;
            PERFORM NOTHING;
        } else {
            PERFORM RAND;
            if (perf_ret < $LAD_CLEAR) {
                PERFORM CLEAR_LAST_ATTACKED_DIRECTION; 
            }
            PERFORM $ACTION_MOVE dir;
            PERFORM NOTHING;
        }
    } 
    else { 
        // Wait if the time is earlier than 0:20 + random tie breaker
        if (current < 360 + (op*127)%54) PERFORM NOTHING;
    
        // Otherwise go ahead and claim the site
        object chooser = 0;
        chooser = QUERY UNIT [unit] MIN [query <_> op]
                WHERE [query->Class == $RACE_CHOOSER_CLASS];
                
        if (chooser==0) {
            say "No viable Landing Sites at destination";
            PERFORM SET_OBJECTIVE 0;
            PERFORM NOTHING;
        }
        
        target = chooser;
        PERFORM $ACTION_GREKIM0 ownerTeam; //order grekim base
        PERFORM SET_OBJECTIVE 0;
        PERFORM NOTHING;
    }
}

//TECH BEACON
if (uclass==4020) {
	PERFORM 18; //change TO REAPH
	PERFORM SET_OBJECTIVE 0;
	PERFORM NOTHING;
}

//PORTAL CHOOSER
if (uclass>=4047) {
	PERFORM 4 unitPosition; //spawn Grekim portal
	PERFORM SET_OBJECTIVE 0;
	PERFORM NOTHING;
}

//SPECIES CHOOSER
if (uclass==$RACE_CHOOSER_CLASS) {
    if (player->IsComputerPlayer){
        PERFORM 25; //Computer players spawn a portal
        PERFORM NOTHING;
    } 
    say "Grekim progeneration enabled";
	PERFORM $ACTION_MOVE; //change into 0x0 (non-clipping model)
	PERFORM $ACTION_GREKIM0 unitPosition; //create grex base
	PERFORM NOTHING;
}



int ap = unit->AdditionalParameters;

if (ap!=1 && ap!=2 && ap!=3 && ap!=4) {
	ap = 1;
	PERFORM SET_ADDITIONAL_PARAMS ap;
}
else if (ap==1) {
	ap = 2;
	PERFORM SET_ADDITIONAL_PARAMS ap;
}
else if (ap==2) {
	ap = 3; //3
	PERFORM SET_ADDITIONAL_PARAMS ap;
}
else if (ap==3) {
	ap = 4;
	PERFORM SET_ADDITIONAL_PARAMS ap;
}
else if (ap==4) {
	ap = 0;
	PERFORM SET_ADDITIONAL_PARAMS ap;
}


int class = $LC_CLASS; //look for LC
int temp = QUERY VALUE [unit] SUM [1] WHERE [query->Class==$LC_CLASS];
if (temp==0) { 
	class = $QP_CLASS; //no LC around, look for QP
	temp = QUERY VALUE [unit] SUM [1] WHERE [query.Rank == $RESOURCE_RANK ];
	if (temp==0) {
		class = 0; //no resources found at all
	}
}

int quadrant = 0;

int uYPosition = unitPosition[$Ypos];
int uXPosition = unitPosition[$Xpos];

//resources were found	nearby
if (class>0) {	
		
	int qposition = 0;
	//1 - bot right,   2-top right,   3-top left,   4-bot left
	int quad1 = QUERY VALUE [unit] SUM [1] WHERE [query->Class==class && (qposition = query->Position) && qposition[$Xpos] >= uXPosition && qposition[$Ypos] >= uYPosition];
	int quad2 = QUERY VALUE [unit] SUM [1] WHERE [query->Class==class && (qposition = query->Position) && qposition[$Xpos] >= uXPosition && qposition[$Ypos] < uYPosition];
	int quad3 = QUERY VALUE [unit] SUM [1] WHERE [query->Class==class && (qposition = query->Position) && qposition[$Xpos] < uXPosition && qposition[$Ypos] < uYPosition];
	int quad4 = QUERY VALUE [unit] SUM [1] WHERE [query->Class==class && (qposition = query->Position) && qposition[$Xpos] < uXPosition && qposition[$Ypos] >= uYPosition];

	
	//store the largest quadrant into temp1
    int temp1 = quad1 |> quad2;
    temp1 = quad3 |> temp1;
    temp1 = quad4 |> temp1;
	
	if (temp1==quad1) { quadrant = $BOTTOM_RIGHT; }
	if (temp1==quad2) { quadrant = $TOP_RIGHT; }
	if (temp1==quad3) { quadrant = $TOP_LEFT; }
	if (temp1==quad4) { quadrant = $BOTTOM_LEFT; }
	
} 
else { //no resources found, place towards center of map
	PERFORM GET_MAP_LENGTH;
	int centerY = perf_ret / 2;
	PERFORM GET_MAP_WIDTH;
	int centerX = perf_ret / 2;
	
	if (uXPosition < centerX && uYPosition < centerY) {	quadrant = $BOTTOM_RIGHT; }
	if (uXPosition < centerX && uYPosition >= centerY) { quadrant = $TOP_RIGHT; }
	if (uXPosition >= centerX && uYPosition < centerY) { quadrant = $BOTTOM_LEFT; }
	if (uXPosition >= centerX && uYPosition >= centerY) { quadrant = $TOP_LEFT; }

//print quadrant," u:",uXPosition, ",", uYPosition, " c:", centerX, ",",centerY,"\n";
	
}

int x = 5;
int y = 5;

// if (quadrant==$BOTTOM_RIGHT) no change
if (quadrant==$TOP_RIGHT) {
	x = x;
	y = -y;
}
if (quadrant==$BOTTOM_LEFT) {
	x = -x;
	y = y;
}
if (quadrant==$TOP_LEFT) {
	x = -x;
	y = -y;
}


//print quadrant, " X: ", x, " y: ", y,"\n";

int position = 0;
position[$Xpos] = uXPosition + x;
position[$Ypos] = uYPosition + y;
int ACTION = 0;
if (ap==1) { //first unit being made (NA)
	ACTION = $ACTION_GREKIM1; //build first unit d tiles diagonal toward direction
	target = $GREKIM_RP_CLASS;
}
if (ap==2) { //second unit being made (guardian)
	position[$Xpos] = position[$Xpos]; //offset 0 tiles horizontal back from unit 1
	position[$Ypos] = position[$Ypos] - 2*y; //offset 2d tiles vertical back from unit 1
	ACTION = $ACTION_GREKIM2;
	target = $GREKIM_RP_CLASS;
}
if (ap==3) { //third unit being made (NA)
	position[$Xpos] = position[$Xpos] - x; //offset d tiles horizontal back from unit 1
	position[$Ypos] = position[$Ypos]; //offset 0 tiles vertical back from unit 1
	ACTION = $ACTION_GREKIM3; 
	target = $GREKIM_RP_CLASS;
}
if (ap==4) { //fourth unit being made (pharo)
	position[$Xpos] = position[$Xpos] - 1.6*x; //offset 1.6*d tiles horizontal back from unit 1
	position[$Ypos] = position[$Ypos]; //offset 0 tiles vertical back from unit 1
	ACTION = $ACTION_GREKIM4; 
	target = $GREKIM_RP_CLASS;
}
if (ap==0) { //fifth unit being made (sepi)
	PERFORM SET_OBJECTIVE 0;
	position[$Xpos] = position[$Xpos] - 1.6*x; //offset 1.6*d tiles horizontal back from unit 1
	position[$Ypos] = position[$Ypos] - 2*y; //offset 2d tiles vertical back from unit 1
	ACTION = $ACTION_GREKIM5; 
	target = $GREKIM_RP_CLASS;
}



int length = 5;
int mult = length;
int xoffset = length; 
int yoffset = 0;
//target set above
PERFORM CAN_CLASS_FIT_AT position; //see if the unit fits at original location
int spotClear = perf_ret; 
int counter = 0;

if (spotClear != 255) {
	position = unitPosition; //center it based on the chooser 
	x = unitPosition[$Xpos];
	y = unitPosition[$Ypos];
}


while (spotClear != 255) { //the unit does not fit, so calculate new offset coords
	counter = counter + 1;
	if (counter == 25) { break; }
	position[$Xpos] = x + xoffset;
	position[$Ypos] = y + yoffset;

	PERFORM CAN_CLASS_FIT_AT position;
	spotClear = perf_ret;   
	
	if (xoffset > 0 && yoffset < 0) { yoffset = 0; mult=mult+length; xoffset = mult; } 
	else {
		if (xoffset <= 0 && yoffset < 0) { xoffset = xoffset + mult;  }
		if (xoffset < 0 && yoffset >= 0) { yoffset = yoffset - mult;  }
		if (xoffset >= 0 && yoffset > 0) { xoffset = xoffset - mult;  }
		if (xoffset > 0 && yoffset == 0) { yoffset = yoffset + mult;  } 
	}
	if (xoffset == 0 && yoffset == 0) { xoffset = xoffset + mult; }
}  

if (counter==25) { say "Unable to create all starter units."; say_to_var ""; say "Blame whoever made this map."; }

if (ACTION==$ACTION_GREKIM1) { PERFORM $ACTION_GREKIM1 position; }
else if (ACTION==$ACTION_GREKIM2) { PERFORM $ACTION_GREKIM2 position; }
else if (ACTION==$ACTION_GREKIM3) { PERFORM $ACTION_GREKIM3 position; }
else if (ACTION==$ACTION_GREKIM4) { PERFORM $ACTION_GREKIM4 position; }
else if (ACTION==$ACTION_GREKIM5) { PERFORM $ACTION_GREKIM5 position; }


