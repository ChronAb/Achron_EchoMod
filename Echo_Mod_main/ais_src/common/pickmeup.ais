// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.ais

if (unit->IsStasis) { 
	PERFORM SET_ADDITIONAL_PARAMS 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM NOTHING;
}

target = unit->ObjectiveParameters;

if (target && !(target->IsStop)) {
    if (target->TotalCarriedSize + unit.Size <= target.CarryingCapacity) {  //carrier has room for me
		
        if (unit <_> target > 16) {
			
			int dir = 0;
			int counter = unit->AdditionalParameters2; //move counter to move in the same direction
			if (counter>0) {           //more than 0 means already moving in a direction
				counter = counter - 1; //decrease the counter
				PERFORM SET_ADDITIONAL_PARAMS2 counter;
				int rot = unit->Rotation; //get the unit's current rotation
				$DIR_FROM_ROT             //set the dir to move to based on that unit's rotation
			}
			else {  //no move counter stored, so query where to move to next
				//air units will try to match height level of carrier if it's not on ground level
				ignore_collision_with_unit = target;
				if ($IS_AIR_UNIT) {
					dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ (target <=> query) * 2 ]  WHERE [1];    
				}
				else {
					dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ (target <=> query) * 1.2 ]  WHERE [1];    
				}
				
				if (dir[0,8] >= 16) { counter = 0; } //moving up or down, so don't store counter
				else {
					counter = dir[16,8]; 			  //the counter is stored in the 3rd byte of dir
					if (counter > 7) { counter = 7; } //cap it at 7 since AdditionalParameters2 only has 3 bits
				}
				PERFORM SET_ADDITIONAL_PARAMS2 counter;
			}

			dir[16,8] = 0; //clear out the 3rd byte that stores the counter
			if (dir && dir != $QUERY_EXHAUSTED) {
				PERFORM $ACTION_MOVE dir; 
				if ( perf_ret!=1) { 
					PERFORM SET_ADDITIONAL_PARAMS2 0;
				}
			}
			PERFORM NOTHING;			
        }
        else { //wait
            if (ap[$TIME_BIT] && AP_PLAYER) {        
                PERFORM GET_CUR_TIME;
                if (perf_ret[0,7] == ap[$TIMESTAMP]) { //if timestamps line up, clear the AP
                    PERFORM SET_ADDITIONAL_PARAMS 0;
					PERFORM SET_ADDITIONAL_PARAMS2 0;
                    PERFORM SET_OBJECTIVE 0;
                    PERFORM NOTHING;
                }
                else { 
                    if (unit->XPosition == -1) {  //got picked up
                        PERFORM SET_ADDITIONAL_PARAMS 0;
						PERFORM SET_ADDITIONAL_PARAMS2 0;
                        PERFORM SET_OBJECTIVE 0; 
                    }
                    PERFORM NOTHING;  //wait!
                }
            }
            else {
                PERFORM GET_CUR_TIME;  //start the waiting
                int time = perf_ret[0,7];
                if (time==0) { time = 127; }
                ap[$TIMESTAMP] = time;
                ap[0,2] = 3; //set time and player bits
                PERFORM SET_ADDITIONAL_PARAMS ap;                       
                PERFORM NOTHING;
            }
        }
    }
    else { 
        if (unit->XPosition == -1) { }
        else $SAY_FULL 
    }
}


PERFORM SET_ADDITIONAL_PARAMS 0;
PERFORM SET_ADDITIONAL_PARAMS2 0;
PERFORM SET_OBJECTIVE 0;



 