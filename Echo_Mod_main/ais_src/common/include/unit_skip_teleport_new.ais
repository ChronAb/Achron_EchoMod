// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

//New Skip

#include common/include/unit_common_header.aih

/*
Purpose:
Permits units who are not near a teleporter to self-teleport (i.e. skip)

Design:
    1. If power is < 0, or there is insufficient QP or HP, the skip should fail
    2. Units skipping to a location are limited to their LOS radius
    3. Units skipping to a unit may Skip out to their LOS radius + 12
    optional features:
    4. If the skip is not in LOS, then run a pre-skip action first
    5. If the last action was to skip, cost is reduced

Logic flow:
    (Already done by parent script)
        * Verify that you are permitted to teleport
        * Check if there is a teleporter or slipgate nearby
        
    0. Define macros
    1. Determine skip parameters
        i. Set QP, Power, HP cost
        ii. Check range limitations
    2. Attempt to skip
    3. If unable to skip, move toward destination

    (old)
	see if there is a teleporter/slingshot nearby, if there is use it instead of self-skipping.
	if out of skip energy, move to the destination while energy regenerates. attempt skip when has energy
	if distance > 30, shorten it to 30 in the same direction, use as desired (temporary) destination,
	skip to destination,
	if fails, try to skip to the 8 immediate spots all around the destination,
	if that fails, try to skip the same distance but angled offset of  22, -22, 45, -45 degrees,
	if that fails, try to skip 2/3s the distance in a straight line, then with the same angle offsets,
	if that fails, try to skip 1/3s the distance in a straight line, then with the same angle offsets,
	if that fails change objective to Move there.
*/

// 0. Define Macros
//********************************************************************
// object closesttport inherited from parent
int ap = unit->AdditionalParameters;

//radian angle values for 22,-22,45 and -45 degrees =  pi / 8 and pi / 4
#define n22 -0.39269908 
#define p22 0.39269908
#define n45 -0.78539816
#define p45 0.78539816

//macro to calculate and a skip to a position specified by _angle offset with distance specified by _dist
#define CUSTOM_ANGLE_DIST_SKIP pos = 0;\
		int ux = unitPosition[$Xpos];\
        int uy = unitPosition[$Ypos];\
        int xd = destX - ux;\
        int yd = destY - uy;\
        float a = yd atan2 xd;\
		a = a + _angle;\
        yd = _dist * sin a;\
        xd = _dist * cos a;\
        pos[$Xpos] = (ux + xd);\
		pos[$Ypos] = (uy + yd);\
        if (airunit) { \
			PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;\
			pos[$Zpos] = unitZ |> perf_ret[$Zpos];\
		}\
		if (pos!=unitPosition) { PERFORM $ACTION_SKIP pos; tported = perf_ret; }
        
// 1. Determine skip parameters
//********************************************************************
int op = unit->ObjectiveParameters;
int pos = op;
int to_unit = 0;
if (op!=$INVALID_POSITION && op[$Zpos]==31) {
    to_unit = 1;
	target = op[0,16];
    pos = target->Position;
}
int airunit = 0;
if ($IS_AIR_UNIT) {
    airunit = 1;
    if (pos[$Zpos]==0) {
        PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;  //move to the spot above the position
        pos[$Zpos] = perf_ret[$Zpos];
    }
} else pos[$Zpos] = 0;

target = unit->Class;
int unitPosition = unit->Position;
int unitZ = unitPosition[$Zpos];
int x = pos[$Xpos];
int y = pos[$Ypos];
int destX = x;
int destY = y;
int z = pos[$Zpos]; 
int goal_dist = unit <_> pos;
goal_dist = |/goal_dist;

// check whether distance to goal is within the skip range limit
if (( to_unit && goal_dist > (unit.SightHRange+12) ) 
        || ( !to_unit && goal_dist > unit.SightHRange )) {
    goal_dist = unit.SightHRange;

    int ux = unitPosition[$Xpos];
    int uy = unitPosition[$Ypos];
    int xd = x - ux;
    int yd = y - uy;
    float a = yd atan2 xd;
    yd = goal_dist * sin a;
    xd = goal_dist * cos a;
      
    pos[$Xpos] = (ux + xd);
    pos[$Ypos] = (uy + yd);
    pos[$Zpos] = z;
    x = pos[$Xpos];
    y = pos[$Ypos];
}


// 2. Attempt to Skip (like a mofo)
//********************************************************************

/* check if you have a line-of-sight to destination and can fit 
if ( can_skip < 1 ){
    PERFORM CAN_CLASS_FIT_AT pos; 
    if ( perf_ret >= 1 ){
        can_skip = 1;
    } 
}
*/

PERFORM $ACTION_SKIP pos;
int tported = perf_ret;

// destination is blocked, see if we can find a spot nearby that works
if ( tported < 1 ){ 
    int ulength = 3; //unit.Length;
    int mult = ulength+1;
    int xoffset = mult; 
    int yoffset = 0;
    int tportCounter = 0;
    
    //Try adjacent spots
    while (tported<1 && tportCounter<8) {
        tportCounter = tportCounter + 1;
        pos[$Xpos] = x + xoffset;
        pos[$Ypos] = y + yoffset;
        
        if (airunit) {
            int targetZ = pos[$Zpos];
            if (targetZ == 0) {
                PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;
                pos[$Zpos] = unitZ |> perf_ret[$Zpos];
                //print unitZ ," trying : ", pos[$Xpos], " ", pos[$Ypos], " ", pos[$Zpos], "\n";
            } else {
            
                PERFORM IS_MAP_POSITION_VALID pos;
                if (perf_ret==0) {
                    PERFORM GET_MAP_NEXT_Z_POSITION_UP pos[0,24];
                    pos = perf_ret;
                }
            }
        }

        if (pos != unitPosition) {
			PERFORM $ACTION_SKIP pos;
            tported = perf_ret;  
        }

        if (xoffset > 0 && yoffset < 0) { yoffset = 0; mult=mult+ulength; xoffset = mult; } 
        else {
            if (xoffset <= 0 && yoffset < 0) { xoffset = xoffset + mult;  }
            if (xoffset < 0 && yoffset >= 0) { yoffset = yoffset - mult;  }
            if (xoffset >= 0 && yoffset > 0) { xoffset = xoffset - mult;  }
            if (xoffset > 0 && yoffset == 0) { yoffset = yoffset + mult;  } 
        }
        if (xoffset == 0 && yoffset == 0) { xoffset = xoffset + mult; }
    }

    //Try skipping out at 22 degree angles to the destination
    if (tportCounter==9) {
        int _dist = 0;
        float _angle = 0;
        _dist = goal_dist;

        if (1) { //max dist @ 22 degrees
            _angle = $p22; $CUSTOM_ANGLE_DIST_SKIP
        } 
        if (tported<1) { //max dist @ -22 degrees
            _angle = $n22; $CUSTOM_ANGLE_DIST_SKIP
        } 
    }
}

// 3. If the teleport was successful, then deduct resources
//********************************************************************
if ( tported > 0 ){ 
    PERFORM $ACTION_POST_SKIP pos;
    PERFORM SET_ADDITIONAL_PARAMS2 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM NOTHING;
}


//********************************************************************
//********************************************************************
//********************************************************************
/*
// 3. Attempt to self-teleport (like a mofo)
//********************************************************************

// 3.1. move towards destination until skip conditions are met
if ( can_skip != 1 ) {
    pos = unit->ObjectiveParameters;
    if ($IS_AIR_UNIT) {
        airunit = 1;
        if (z==0) {
            PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;  //move to the spot above the position
            z = perf_ret[$Zpos];
            pos[$Zpos] = z;
        }
    }
    
    int dir = 0;
    int counter = unit->AdditionalParameters2; //move counter to move in the same direction
    if (counter>0) {           //more than 0 means already moving in a direction
        counter = counter - 1; //decrease the counter
        PERFORM SET_ADDITIONAL_PARAMS2 counter;
        int rot = unit->Rotation; //get the unit's current rotation
        $DIR_FROM_ROT             //set the dir to move to based on that unit's rotation
    }
    else {  //no move counter stored, so query where to move to next
        dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ (pos <=> query) * 1.2 ] WHERE [1];   
        if (dir[0,8] >= 16) { counter = 0; } //moving up or down, so don't store counter
        else {
            counter = dir[16,8]; 			  //the counter is stored in the 3rd byte of dir
            if (counter > 7) { counter = 7; } //cap it at 7 since AdditionalParameters2 only has 3 bits
        }
        PERFORM SET_ADDITIONAL_PARAMS2 counter;
    }

    dir[16,8] = 0; //clear out the 3rd byte that stores the counter
    
    if (dir==0 || dir == $QUERY_EXHAUSTED)  { PERFORM NOTHING; }
    PERFORM $ACTION_MOVE dir;
    if (perf_ret!=1) {
        PERFORM SET_ADDITIONAL_PARAMS2 0;
    }	
    PERFORM NOTHING;
}


// 3.2. Perform skip teleport
PERFORM GET_CUR_TIME;
int current = perf_ret;
say "delay: ", current%18;
say " action: ", unit->Action;

PERFORM $ACTION_SKIP pos;
//$print "at X:", unitPosition[$Xpos], " Y:",  unitPosition[$Ypos]," final dist:", unit<_>pos,"\n";

 

//didn't fit into immediate area around destination
//try skipping out at 22 and 45 degree angles to the destination
/*then try skipping half the distance
if (tportCounter==9) { 		

    int _dist = 0;
    float _angle = 0;
    _dist = goal_dist;

    if (1) { //max dist @ 22 degrees
        _angle = $p22; $CUSTOM_ANGLE_DIST_SKIP
    } 
    if (tported<1) { //max dist @ -22 degrees
        _angle = $n22; $CUSTOM_ANGLE_DIST_SKIP
    } 
    if (tported<1) { //max dist @ 45 degrees
        _angle = $p45; $CUSTOM_ANGLE_DIST_SKIP
    } 
    if (tported<1) { //max dist @ -45 degrees
        _angle = $n45; $CUSTOM_ANGLE_DIST_SKIP	
    } 
    
    if (tported<1 ) {
        _dist = goal_dist * 2 / 3; //jump two-thirds distance
        
        if (1) { //two-thirds, straight
            _angle = 0; $CUSTOM_ANGLE_DIST_SKIP
        }
        
        if (tported<1) { //two-thirds @ 22 degrees
            _angle = $p22; $CUSTOM_ANGLE_DIST_SKIP
        } 
        if (tported<1) { //two-thirds @ -22 degrees
            _angle = $n22; $CUSTOM_ANGLE_DIST_SKIP
        } 
        if (tported<1) { //two-thirds @ 45 degrees
            _angle = $p45; $CUSTOM_ANGLE_DIST_SKIP
        } 
        if (tported<1) { //two-thirds @ -45 degrees
            _angle = $n45; $CUSTOM_ANGLE_DIST_SKIP
        } 
    }
    
    
    if (tported<1) {
        _dist = goal_dist / 3; //jump one-thirds distance
        
        if (1) { //one-thirds, straight
            _angle = 0; $CUSTOM_ANGLE_DIST_SKIP
        }
        
        if (tported<1) { //one-thirds @ 22 degrees
            _angle = $p22; $CUSTOM_ANGLE_DIST_SKIP
        } 
        if (tported<1) { //one-thirds @ -22 degrees
            _angle = $n22; $CUSTOM_ANGLE_DIST_SKIP
        } 
        if (tported<1) { //one-thirds @ 45 degrees
            _angle = $p45; $CUSTOM_ANGLE_DIST_SKIP
        } 
        if (tported<1) { //one-thirds @ -45 degrees
            _angle = $n45; $CUSTOM_ANGLE_DIST_SKIP
        } 
    }
    
}*/