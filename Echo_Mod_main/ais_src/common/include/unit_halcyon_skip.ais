// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih


/*
Logic flow:
	see if there is a teleporter/slingshot nearby, if there is use it instead of self-skipping.
	if out of skip energy, move to the destination while energy regenerates. attempt skip when has energy
	if distance > 30, shorten it to 30 in the same direction, use as desired (temporary) destination,
	skip to destination,
	if fails, try to skip to the 8 immediate spots all around the destination,
	if that fails, try to skip the same distance but angled offset of  22, -22, 45, -45 degrees,
	if that fails, try to skip 2/3s the distance in a straight line, then with the same angle offsets,
	if that fails, try to skip 1/3s the distance in a straight line, then with the same angle offsets,
	if that fails change objective to Move there.
*/

//radian angle values for 22,-22,45 and -45 degrees =  pi / 8 and pi / 4
#define n22 -0.39269908 
#define p22 0.39269908
#define n45 -0.78539816
#define p45 0.78539816

//macro to calculate and a skip to a position specified by _angle offset with distance specified by _dist
#define CUSTOM_ANGLE_DIST_SKIP pos = 0;\
		int ux = unitPosition[$Xpos];\
        int uy = unitPosition[$Ypos];\
        int xd = destX - ux;\
        int yd = destY - uy;\
        float a = yd atan2 xd;\
		a = a + _angle;\
        yd = _dist * sin a;\
        xd = _dist * cos a;\
        pos[$Xpos] = (ux + xd);\
		pos[$Ypos] = (uy + yd);\
        if (airunit) { \
			PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;\
			pos[$Zpos] = unitZ |> perf_ret[$Zpos];\
		}\
		if (pos!=unitPosition) { PERFORM $ACTION_TPORT_FAILED; PERFORM $ACTION_SKIP pos; tported = perf_ret; }

object closesttport =  0;
int ap = unit->AdditionalParameters;
//only look for gates if not tss'ed
if (!(unit->IsStasis)) {
    if (ap[$UNIT_BIT]) { //already have a unit stored
        closesttport = ap[$STOREDUNIT];
        int ctc = closesttport->Class;
        if (!(ctc == $TELEPORTER_CLASS || ctc == $SLIPGATE_CLASS)) { //if the stored unit isn't a  teleporter or gate
			ap[$UNIT_BIT] = 0;
			ap[$STOREDUNIT] = 0;
            PERFORM SET_ADDITIONAL_PARAMS ap;
            closesttport = 0;        
        }
    }
    if (closesttport==0) {   
		int qrank=0;
		if (unit.Rank!=$CARRIER_RANK) { //most units can use both teleporters and slipgates
			closesttport = QUERY UNIT [unit] MIN [ unit <=> query ] 
                       WHERE [ ((qrank = query.Rank)>=$TELEPORTER_RANK && qrank<=$SLIPGATE_RANK) && query->IsAlly==1 && query->Objective == 0 && !(query->Status & $FROZEN_COMMJAM) ]; 
		} 
		else { //incepters can only use slipgates
			closesttport = QUERY UNIT [unit] MIN [ unit <=> query ] WHERE [ query.Rank==$SLIPGATE_RANK && query->IsAlly==1 && query->Objective == 0 && !(query->Status & $FROZEN_COMMJAM) ]; 
		}
    }
}

if (!closesttport) { //no gate found, skip yourself like a mofo
    int pos = unit->ObjectiveParameters;
	int op = pos;
    if (unit->Ammo < 1) {  //move until enough energy to skip
		if (player->$Power < 0) {
			int ap = 0;
			ap[$OBJECTIVE] = $OBJECTIVE_UNIT_MOVE;
			ap[$MOVE_BIT] = 1;
			PERFORM SET_ADDITIONAL_PARAMS ap;
			PERFORM SET_ADDITIONAL_PARAMS2 0;
			PERFORM SET_OBJECTIVE $OBJECTIVE_UNIT_MOVE;
			PERFORM NOTHING;
		}
		
        int dir = 0;
		int counter = unit->AdditionalParameters2; //move counter to move in the same direction
		if (counter>0) {           //more than 0 means already moving in a direction
			counter = counter - 1; //decrease the counter
			PERFORM SET_ADDITIONAL_PARAMS2 counter;
			int rot = unit->Rotation; //get the unit's current rotation
			$DIR_FROM_ROT             //set the dir to move to based on that unit's rotation
		}
		else {  //no move counter stored, so query where to move to next
			dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ (pos <=> query) * 1.2 ] WHERE [1];   
			if (dir[0,8] >= 16) { counter = 0; } //moving up or down, so don't store counter
			else {
				counter = dir[16,8]; 			  //the counter is stored in the 3rd byte of dir
				if (counter > 7) { counter = 7; } //cap it at 7 since AdditionalParameters2 only has 3 bits
			}
			PERFORM SET_ADDITIONAL_PARAMS2 counter;
		}
	
		dir[16,8] = 0; //clear out the 3rd byte that stores the counter
		
		if (dir==0 || dir == $QUERY_EXHAUSTED)  { PERFORM NOTHING; }
        PERFORM $ACTION_MOVE dir;
		if (perf_ret!=1) {
			PERFORM SET_ADDITIONAL_PARAMS2 0;
		}	
        PERFORM NOTHING;
    }

	
	

    int x = pos[$Xpos];
    int y = pos[$Ypos];
	int destX = x;
	int destY = y;
	int z = pos[$Zpos]; 
	int airunit = 0;
	if ($IS_AIR_UNIT) {
		airunit = 1;
		if (z==0) {
			PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;  //move to the spot above the position
			z = perf_ret[$Zpos];
			pos[$Zpos] = z;
		}
	}


	int unitPosition = unit->Position;
	int unitZ = unitPosition[$Zpos];
	
//$print "at X:", unitPosition[$Xpos], " Y:",  unitPosition[$Ypos]," final dist:", unit<_>pos,"\n";
	
	int goal_dist = unit <_> pos;
    if (goal_dist > 900) { //max of 30 spaces
        int ux = unitPosition[$Xpos];
        int uy = unitPosition[$Ypos];

        int xd = x - ux;
        int yd = y - uy;
        
        
        float a = yd atan2 xd;
        yd = 30 * sin a;
        xd = 30 * cos a;
          
        pos[$Xpos] = (ux + xd);
		pos[$Ypos] = (uy + yd);
        pos[$Zpos] = z;
		
        x = pos[$Xpos];
        y = pos[$Ypos];

		
//$print " shortened to:", unit<_>pos," ", unit->ObjectiveParameters, "\n";
		goal_dist = 30;
    } 
	else {
		goal_dist = |/goal_dist;
	}
	

	//check to see if this unit is trying to jump to destination where its commander is 
	//and if it is, this means it's close enough to see it so stop jumping
	PERFORM GET_UNIT_AT pos;
	if (perf_ret > 0) {
		object myCommander = unit->Commander;
		if (perf_ret==unit || (myCommander->IsAlive==1 && perf_ret==myCommander) ){
			PERFORM SET_OBJECTIVE 0;
			PERFORM CLEAR_LAST_ATTACKED_DIRECTION;
			PERFORM SET_ADDITIONAL_PARAMS2 0;
			PERFORM SET_ADDITIONAL_PARAMS 0; //have subordinates stop following
			PERFORM NOTHING;
		}
	}
	
	
	
    PERFORM $ACTION_SKIP pos;
    int tported = perf_ret;  
    int ulength = 3; //unit.Length;
	int mult = ulength;
    int xoffset = ulength; 
    int yoffset = 0;
	int tportCounter = 0;
	
    while (tported < 1 || unit<_>pos > 1225) { //really the true max of skip is 35 to allow some flexibility
		tportCounter = tportCounter + 1;
		if (tportCounter==9 ) { break; } //ran a full circle around the spot
        pos[$Xpos] = x + xoffset;
        pos[$Ypos] = y + yoffset;
		
		if (airunit) {
			int targetZ = pos[$Zpos];
			if (targetZ == 0) {
				PERFORM GET_MAP_NEXT_Z_POSITION_UP pos;
				pos[$Zpos] = unitZ |> perf_ret[$Zpos];
				//print unitZ ," trying : ", pos[$Xpos], " ", pos[$Ypos], " ", pos[$Zpos], "\n";
			} else {
			
				PERFORM IS_MAP_POSITION_VALID pos;
				if (perf_ret==0) {
					PERFORM GET_MAP_NEXT_Z_POSITION_UP pos[0,24];
					pos = perf_ret;
				}
			}
		}

		if (pos != unitPosition) {		
			PERFORM $ACTION_TPORT_FAILED;
			PERFORM $ACTION_SKIP pos;
			tported = perf_ret;  
        }

        if (xoffset > 0 && yoffset < 0) { yoffset = 0; mult=mult+ulength; xoffset = mult; } 
        else {
            if (xoffset <= 0 && yoffset < 0) { xoffset = xoffset + mult;  }
            if (xoffset < 0 && yoffset >= 0) { yoffset = yoffset - mult;  }
            if (xoffset >= 0 && yoffset > 0) { xoffset = xoffset - mult;  }
            if (xoffset > 0 && yoffset == 0) { yoffset = yoffset + mult;  } 
        }
        if (xoffset == 0 && yoffset == 0) { xoffset = xoffset + mult; }
    }   
	
	//didn't fit into immediate area around destination
	//try skipping out at 22 and 45 degree angles to the destination
	//then try skipping half the distance
	if (tportCounter==9) { 		

		int _dist = 0;
		float _angle = 0;
		_dist = goal_dist;

		if (1) { //max dist @ 22 degrees
			_angle = $p22; $CUSTOM_ANGLE_DIST_SKIP
		} 
		if (tported<1) { //max dist @ -22 degrees
			_angle = $n22; $CUSTOM_ANGLE_DIST_SKIP
		} 
		if (tported<1) { //max dist @ 45 degrees
			_angle = $p45; $CUSTOM_ANGLE_DIST_SKIP
		} 
		if (tported<1) { //max dist @ -45 degrees
			_angle = $n45; $CUSTOM_ANGLE_DIST_SKIP	
		} 
		
		if (tported<1 ) {
			_dist = goal_dist * 2 / 3; //jump two-thirds distance
			
			if (1) { //two-thirds, straight
				_angle = 0; $CUSTOM_ANGLE_DIST_SKIP
			}
			
			if (tported<1) { //two-thirds @ 22 degrees
				_angle = $p22; $CUSTOM_ANGLE_DIST_SKIP
			} 
			if (tported<1) { //two-thirds @ -22 degrees
				_angle = $n22; $CUSTOM_ANGLE_DIST_SKIP
			} 
			if (tported<1) { //two-thirds @ 45 degrees
				_angle = $p45; $CUSTOM_ANGLE_DIST_SKIP
			} 
			if (tported<1) { //two-thirds @ -45 degrees
				_angle = $n45; $CUSTOM_ANGLE_DIST_SKIP
			} 
		}
		
		
		if (tported<1) {
			_dist = goal_dist / 3; //jump one-thirds distance
			
			if (1) { //one-thirds, straight
				_angle = 0; $CUSTOM_ANGLE_DIST_SKIP
			}
			
			if (tported<1) { //one-thirds @ 22 degrees
				_angle = $p22; $CUSTOM_ANGLE_DIST_SKIP
			} 
			if (tported<1) { //one-thirds @ -22 degrees
				_angle = $n22; $CUSTOM_ANGLE_DIST_SKIP
			} 
			if (tported<1) { //one-thirds @ 45 degrees
				_angle = $p45; $CUSTOM_ANGLE_DIST_SKIP
			} 
			if (tported<1) { //one-thirds @ -45 degrees
				_angle = $n45; $CUSTOM_ANGLE_DIST_SKIP
			} 
		}
		
	}
	
	
	
    if (tportCounter == 9 && tported<1) { 
        $SAY_SKIP
		PERFORM CLEAR_LAST_ATTACKED_DIRECTION;
		PERFORM $ACTION_TPORT_FAILED; //clear skip cap bit
		PERFORM SET_OBJECTIVE $OBJECTIVE_MOVE_DISPATCH; //simple move
		PERFORM SET_ADDITIONAL_PARAMS2 0;			
		PERFORM NOTHING;
    }
	
	int sameSpot = 0;
	//only consume teleport ammo if the unit actually teleported elsewhere
	//otherwise it might consume teleport ammo even when a teleport fails
	if (unit->Position!=unitPosition) {
		PERFORM $ACTION_POST_SKIP pos; //must run this to clear capbit, otherwise unit gets stuck :)
		ap[$OBJECTIVE] = $OBJECTIVE_SKIP; //set AP objective to teleport so all subordinates can follow
		PERFORM SET_ADDITIONAL_PARAMS ap;				
	}
	else {
		sameSpot = 1;
		PERFORM $ACTION_TPORT_FAILED; //clear skip cap bit, the teleport may not have failed (pardon the action name)
	}

	
	int distToOp = op<_>unit;

	//too far from destination, skip again
	ulength = unit.Length;;
    if (distToOp > 4 + ulength*ulength) { 	
		int stopSkipping = 0;
		//within 2 unit lengths of destination, see if destination is beyond edge, if so, stop skipping
		if ( distToOp < 4 + 2 * ulength * ulength) {
			PERFORM GET_MAP_WIDTH;
			if (op[$Xpos] < ulength || op[$Xpos] > perf_ret - ulength) {
				stopSkipping = 1;
			}
			
            PERFORM GET_MAP_LENGTH;
            if (op[$Ypos] < ulength || op[$Ypos] > perf_ret - ulength) {
				stopSkipping = 1;
			}
		}
		
		if (distToOp < 300) { //within ~17 
			stopSkipping = 1;
		}
		
		if (!stopSkipping && sameSpot && distToOp < 900) { //same spot, again and within 1 jump radius 
			stopSkipping = 1;
		}

		if (!stopSkipping) {
			PERFORM GET_UNIT_AT op; //check if trying to skip INTO another unit
			target = perf_ret;
			if (target->IsAlive==1) {
				int tlength = target.Length;  //get that unit's length
				int len = (ulength/2 + tlength/2 + 4); //once within 2 spaces of that unit, stop skipping

				if (distToOp <= len*len) {
					stopSkipping = 1;
				}
			}
		}
		if (!stopSkipping) {
			PERFORM NOTHING; 
		}
	}
	//clear out all the AP except the stored oBJECTIVE field so that 
	//subordinates can follow this commander if it arrived to destination first
    int tempObj = ap[$OBJECTIVE];
	ap = 0;
	ap[$OBJECTIVE] = tempObj;
	PERFORM SET_ADDITIONAL_PARAMS ap;
    PERFORM SET_OBJECTIVE 0;
	PERFORM CLEAR_LAST_ATTACKED_DIRECTION;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM NOTHING;
    
} 

ap[$STOREDUNIT] = closesttport;
ap[$UNIT_BIT] = 1;
PERFORM $ACTION_TPORT_FAILED; //clear skip cap bit 3
PERFORM $ACTION_TELEPORTED; //clear teleported cap bit 1
PERFORM CLEAR_LAST_ATTACKED_DIRECTION;
PERFORM SET_ADDITIONAL_PARAMS ap;

			
