// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.


if (target->IsAlly || boxes) { 

    if (target.Size + unit->TotalCarriedSize > unit.CarryingCapacity) {
        $SAY_CARRY
        PERFORM SET_OBJECTIVE 0;
		PERFORM SET_ADDITIONAL_PARAMS 0;
		PERFORM SET_ADDITIONAL_PARAMS2 0;
        PERFORM NOTHING;
    }

	//target is closer than 9 spaces away 
    if ((target<_>unit <= 81) && (target<^>unit <= 900)) { 
        PERFORM SET_OBJECTIVE 0;
        PERFORM $ACTION_SET_OBJECTIVE_IDLE target;
        PERFORM $ACTION_TAKE_UNIT 0;
		PERFORM SET_ADDITIONAL_PARAMS 0;
		PERFORM SET_ADDITIONAL_PARAMS2 0;
        PERFORM NOTHING;
    }
    else {
        //look to see if encountering other units requesting pickup enroute to target pickup
        object temp = QUERY UNIT [unit] MIN [ unit <=> query] WHERE [ query->Objective == $OBJECTIVE_PICKMEUP && query->IsAlly && (query->ObjectiveParameters == unit)];
        if (temp->IsAlive==1) {
			target = temp;
            if ((target<_>unit <= 81) &&  (target<^>unit <= 900)) {  
                PERFORM $ACTION_SET_OBJECTIVE_IDLE target;
                PERFORM $ACTION_TAKE_UNIT 0;
                PERFORM NOTHING;
            }
        }
		
		int dir = 0;
		if (target<^>unit > 900) {
			//move closer to target
			ignore_collision_with_unit = target;
			dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ (target <=> query) * 2 ]  WHERE [1]; 
		} else {

			int counter = unit->AdditionalParameters2; //move counter to move in the same direction
			if (counter>0) {           //more than 0 means already moving in a direction
				counter = counter - 1; //decrease the counter
				PERFORM SET_ADDITIONAL_PARAMS2 counter;
				int rot = unit->Rotation; //get the unit's current rotation
				$DIR_FROM_ROT             //set the dir to move to based on that unit's rotation
			}
			else {  //no move counter stored, so query where to move to next
				ignore_collision_with_unit = target;
				dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ (target <_> query) * 2 ] WHERE [1];
				if (dir[0,8] >= 16) { counter = 0; } //moving up or down, so don't store counter
				else {
					counter = dir[16,8]; 			  //the counter is stored in the 3rd byte of dir
					if (counter > 7) { counter = 7; } //cap it at 7 since AdditionalParameters2 only has 3 bits
				}
				PERFORM SET_ADDITIONAL_PARAMS2 counter;
			}

			
		}
		dir[16,8] = 0; //clear out the 3rd byte that stores the counter
		if (dir && dir!=$QUERY_EXHAUSTED) {
			PERFORM $ACTION_MOVE dir;
			if (perf_ret!=1) {
				PERFORM SET_ADDITIONAL_PARAMS2 0;
			}		
		} else {
			$SAY_OBSTACLE
			PERFORM SET_ADDITIONAL_PARAMS2 0;
			PERFORM SET_ADDITIONAL_PARAMS 0;
			PERFORM SET_OBJECTIVE 0;
		}
        PERFORM NOTHING;
    }
}

PERFORM SET_ADDITIONAL_PARAMS 0;
PERFORM SET_OBJECTIVE 0;