// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih

target = unit->ObjectiveParameters;

if (target->IsStasis == 1) {
    if (target->IsVisible && unit->Energy == 100) {
        PERFORM SET_OBJECTIVE $OBJ_BLDG_BREAKTSS; // breaktss objective
        PERFORM NOTHING;
    }
    if ($SMART_IDLE) {
        int customField2 = player->CustomField2;
		object tss = customField2[0,16]; //$CUSTOMFIELD_TSS
		object lookup = customField2[16,16]; //$CUSTOMFIELD_LOOKUP
        object u = 0;
		int flags = 0;
    	#include common/include/unit_tss_request.ais
    }
}

PERFORM GET_CLOSEST_TARGET_POSITION_WITHIN_RANGE $ACTION_ATTACK;
int position = perf_ret;

if (position!=-1 && position!=$INVALID_POSITION) { 
    //check if close to target, ATTACK, else move , PERFORM NOTHING
    if (!(target->IsStasis)) {
		object enemy = target;
		target = position;
        PERFORM IS_POSITION_WITHIN_ACTION_ANGLE $ACTION_ATTACK;
		if (perf_ret>0) { //target is attackable in this direction
			
			int targetOnGround  = enemy->IsTerrainGround;

			int uclass = unit->Class;
			target_is_position = 1;
			target = position;
			if (uclass!=$DOME_CLASS && uclass != $DOME_BEAM_CLASS) {			
				if (targetOnGround) { PERFORM $ACTION_ATTACK position; }
				else { PERFORM $ACTION_ATTACK_W1 position; }		
			}
			else {
				if (targetOnGround) { PERFORM $ACTION_ATTACK_POS position; }
				else { PERFORM $ACTION_ATTACK position; }		
			}
            PERFORM NOTHING;
        }
        else {
            PERFORM $ACTION_ROTATE enemy->BestAttackDirection;
            PERFORM NOTHING;
        }
    }
    else {
        PERFORM SET_OBJECTIVE 0; 
        PERFORM NOTHING;
    }
}

PERFORM SET_OBJECTIVE 0;



