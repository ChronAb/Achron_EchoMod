// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih

//arcticus is a one-off
if (unit.Rank == $ARCTICUS_RANK) {

	PERFORM SET_OBJECTIVE 0;
	
	if (unit->Energy < 20) {
	  $SAY_ENERGY
	  PERFORM $ACTION_ERROR1;  
	  PERFORM SET_ADDITIONAL_PARAMS2 0;
	  PERFORM NOTHING;
	}

	target = unit->ObjectiveParameters;
	if (target->IsAlive==1) {
		if (target->Commander==unit) { //can only clear subordinates	
			PERFORM $ACTION_CLEAR_NANITE target;
		} else {
			$SAY_NOT_SUBORDINATE
			PERFORM $ACTION_ERROR1;  
			PERFORM SET_ADDITIONAL_PARAMS2 0;
			PERFORM NOTHING;
		}
	}

	PERFORM NOTHING;
}

#include common/include/unit_common_header.ais


target = unit->ObjectiveParameters;
int energy = 5;
if (uclass>=$OCTOPOD_CLASS && uclass <= $GUARDIAN_CLASS) {energy = 8; } //octopod 
if (uclass==$ARCTICUS_CLASS) { energy = 20; }

if (unit->Energy < energy) {
  $SAY_ENERGY
  PERFORM $ACTION_ERROR1;
  PERFORM SET_OBJECTIVE 0;
  PERFORM SET_ADDITIONAL_PARAMS2 0;
  PERFORM NOTHING;
}


if (target->IsAlive==1) {
	if (uclass==$ARCTICUS_CLASS) {
		if (target->Commander==unit) { //can only clear subordinates	
			PERFORM $ACTION_CLEAR_NANITE target;
			PERFORM SET_OBJECTIVE 0;		
			PERFORM NOTHING;
		} else {
			PERFORM SET_OBJECTIVE 0;		
			PERFORM NOTHING;
		}
	}


	if (target<_>unit <= unit.SightHRange2 && target<^>unit <= unit.SightVRange2 ) {
		  PERFORM $ACTION_CLEAR_NANITE target;
		  PERFORM SET_ADDITIONAL_PARAMS2 0;
		  PERFORM SET_OBJECTIVE 0;
	}
	else {
		if (target<^>unit > unit.SightVRange2) {
			PERFORM SET_ADDITIONAL_PARAMS2 0;
			PERFORM SET_OBJECTIVE 0;
			PERFORM NOTHING;
		}

		int dir = 0;
		int counter = unit->AdditionalParameters2; //move counter to move in the same direction
		if (counter>0) {           //more than 0 means already moving in a direction
			counter = counter - 1; //decrease the counter
			PERFORM SET_ADDITIONAL_PARAMS2 counter;
			int rot = unit->Rotation; //get the unit's current rotation
			$DIR_FROM_ROT             //set the dir to move to based on that unit's rotation
		}
		else {  //no move counter stored, so query where to move to next

			ignore_collision_with_unit = target;
			dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ ( target <_> query) * 1.2 ]  WHERE [1];    
			
			if (dir[0,8] >= 16) { counter = 0; } //moving up or down, so don't store counter
			else {
				counter = dir[16,8]; 			  //the counter is stored in the 3rd byte of dir
				if (counter > 7) { counter = 7; } //cap it at 7 since AdditionalParameters2 only has 3 bits
			}
			PERFORM SET_ADDITIONAL_PARAMS2 counter;
		}

		dir[16,8] = 0; //clear out the 3rd byte that stores the counter
		if (dir && dir != $QUERY_EXHAUSTED) {
			PERFORM $ACTION_MOVE dir; 
			if ( perf_ret!=1) { 
				PERFORM SET_ADDITIONAL_PARAMS2 0;
			}
		}
		PERFORM NOTHING;	
	}

}


PERFORM SET_OBJECTIVE 0;