// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

// Human and Vecgir chronoportation script
/*
step 1: check that requirements are met
step 2: fail if there are no cporters nearby
step 3: chronoport when a Slipgate or Chronoporter hierarchies to me
step 4: run maveaway.ais script
*/

#include common/include/unit_common_header.aih

// step 1: check that requirements are met
//*********************************************
int uclass=unit->Class;
if ( $IS_HUMAN ) {
	if ( !player->Advancements[$HUMAN_ADV_GATE] ) {
		PERFORM SET_OBJECTIVE 0;
		PERFORM NOTHING;
	}
} else { //vecgir
	if (!player->Advancements[$VECGIR_ADV_GATE] ) {
		PERFORM SET_OBJECTIVE 0;
		PERFORM NOTHING;
	}
}

//tss'd units can't chronoport. don't waste time on it
if (unit->IsStasis) { 
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM NOTHING;
}

int lc = 0;
int qp = 0;
if (uclass < 300) { //ceso
	if (uclass < 45) { 
		if (uclass<$TANK_CLASS) { 
			if (uclass==$MARINE_CLASS||uclass==$MARINE_RAISED_CLASS||uclass==$WINTERS_CLASS||uclass==$WINTERS_RAISED_CLASS) { qp = $MARINE_CPORT_QP; }
			if (uclass==$SOP_CLASS || uclass==$SOP_RAISED_CLASS||uclass==$HOLLOWAY_CLASS||uclass==$HOLLOWAY_RAISED_CLASS) { qp = $SOP_CPORT_QP; } 
			else { qp = $MECH_CPORT_QP; }  
		} 
		else if (uclass==$TANK_CLASS) { qp = $TANK_CPORT_QP; } 
		else if (uclass==$TANK2_CLASS) { qp = $TANK2_CPORT_QP; } 
		else if (uclass==$MAR_CLASS) { qp = $MAR_CPORT_QP; } 
		else if (uclass==$MAR2_CLASS) { qp = $MAR2_CPORT_QP; } 
	} 
	else { 
		if (uclass==$ATHC_CLASS) { qp = $ATHC_CPORT_QP; } 
		else if (uclass>=$MFB_CLASS && uclass <=$TYR_MFB_CLASS) { qp = $MFB_CPORT_QP; } 
		else if (uclass==$LANCER_CLASS) { qp = $LANCER_CPORT_QP; } 
		else if (uclass==$FRIGATE_CLASS) { qp = $FRIGATE_CPORT_QP; } 
		else if (uclass==$TORNADE_CLASS) { qp = $TORNADE_CPORT_QP; } 
		else if (uclass==$CRUISER_CLASS) { qp = $CRUISER_CPORT_QP; } 
		else if (uclass==$BLACKBIRD_CLASS) { qp = $BLACKBIRD_CPORT_QP; } 
	} 
}  
if (uclass > 2000 ) { //vecgir
	if (uclass < 2030) { 
		if (uclass==$VIR_ZAYIN_CLASS||uclass==$VIR_ZAYIN_RAISED_CLASS) { qp = $ZAYIN_CPORT_QP; } 
		else if (uclass==$VIR_TETH_CLASS||uclass==$VIR_TETH_RAISED_CLASS) { qp = $TETH_CPORT_QP; }
		else if (uclass==$VIR_SHIN_CLASS || uclass==$VIR_SHIN_RAISED_CLASS) { qp = $SHIN_CPORT_QP; }
		else if (uclass==$TERCHER_Z_CLASS) { qp = $TERCHER_Z_CPORT_QP; } 
		else if (uclass==$TERCHER_T_CLASS) { qp = $TERCHER_T_CPORT_QP; } 
		else if (uclass==$TERCHER_S_CLASS) { qp = $TERCHER_S_CPORT_QP; } 
	} else { 
		if (uclass==$PULSER_Z_CLASS) { qp = $PULSER_Z_CPORT_QP; } 
		else if (uclass==$PULSER_T_CLASS) { qp = $PULSER_T_CPORT_QP; } 
		else if (uclass==$PULSER_S_CLASS) { qp = $PULSER_S_CPORT_QP; } 
		else if (uclass==$HALCYON_Z_CLASS) { qp = $HALCYON_Z_CPORT_QP; } 
		else if (uclass==$HALCYON_T_CLASS) { qp = $HALCYON_T_CPORT_QP; } 
		else if (uclass==$HALCYON_S_CLASS) { qp = $HALCYON_S_CPORT_QP; } 
		else if (uclass>=$DJELT_CLASS) { qp = $SHIN_CPORT_QP; } 
	} 
}

if (player->$LCrystals < lc || player->$QPlasma < qp) {
    $SAY_RESOURCES
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM $ACTION_ERROR1;
    PERFORM NOTHING;
}

int timeSinceLastChronoport = unit->TimeSinceLastChronoport;
PERFORM GET_RECHRONOPORT_DELAY;  //get the rechronoport delay in ticks
if (timeSinceLastChronoport!=-1 && timeSinceLastChronoport<= perf_ret ) { //-1 means unit did not chronoport
	int rechronoportRemaining = perf_ret - timeSinceLastChronoport;
	//ticks per second - set in the scenario parameters    
	PERFORM CONVERT_SECONDS_TO_TICKS 1;
	int TPSOND = perf_ret;
	int rechronoportSeconds = rechronoportRemaining / TPSOND; //used by the $SAY_RECHRONOPORT
	if (rechronoportSeconds==0) { rechronoportSeconds = 1; } //prevent rounding down to 0 
	$SAY_RECHRONOPORT
	PERFORM SET_ADDITIONAL_PARAMS2 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM $ACTION_ERROR1;
    PERFORM NOTHING;
}

//get the maximum chronoporting distance in ticks
PERFORM GET_MAX_CHRONOPORT_DISTANCE;
int cport_max = perf_ret;

//get the current time in ticks
PERFORM GET_CUR_TIME;
int current = perf_ret;

//get the destination time in ticks
int op = unit->ObjectiveParameters;

//print "curr:", current, " to: ", op, " lim: ", cport_max, " diff: ", abs(op-current),"\n";


//if the destination time falls outside of chronoporting distance, unit is not allowed to chronoport
if ( abs(op - current) >= cport_max ) {
// UNCOMMENT THE FOLLOWING BLOCK TO PREVENT CPORT BEYOND MAX RANGE
/*
    $SAY_CHRONOPORT
	PERFORM SET_ADDITIONAL_PARAMS 0;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM SET_PARAM 0;
    PERFORM $ACTION_ERROR1;
    PERFORM NOTHING;
*/

	//if cporting beyond max range, cport TO the max range
	if(op < current) {
		op = current - cport_max + 5;
	}
	else {
		op = current + cport_max;
	}
	PERFORM SET_PARAM op; 
	
}

//going to the future and happens to be a hero unit, don't chronoport
if (op > current) {

	int tc = unit->Class;
	if (tc==$HOLLOWAY_CLASS || tc==$HOLLOWAY_RAISED_CLASS || tc==$WINTERS_CLASS || tc==$WINTERS_RAISED_CLASS ||
		tc==$TYR_MFB_CLASS || tc==$DJELT_CLASS || tc==$DJELT_RAISED_CLASS || 
		tc==$KILDEN_CLASS || tc==$KILDEN_RAISED_CLASS || tc==$DAMATH_CLASS || tc==$DAMATH_RAISED_CLASS ) {
		
		say "Mission commanders should not abandon their troops";
		PERFORM SET_ADDITIONAL_PARAMS 0;
		PERFORM SET_ADDITIONAL_PARAMS2 0;
		PERFORM SET_OBJECTIVE 0;
		PERFORM SET_PARAM 0;
		PERFORM $ACTION_ERROR1;
		PERFORM NOTHING;
	}
}


// step 2: fail if there are no cporters nearby
//*********************************************
PERFORM RAND;
if (perf_ret > 2048) { // 1/16 chance to run each tick (saves CPU) 
    int qrank = 0;
    int qobj = 0;
    //look for chronoporter
    query_vis_distance = 23;
    object closestcport = QUERY UNIT [unit] MIN [ unit <=> query ] 
            WHERE [ ((qrank = query.Rank)==$SLIPGATE_RANK || qrank==$CHRONOPORTER_RANK) &&
                query->IsAlly==1 && qobj!=$OBJ_BLDG_CONSTRUCTION &&
                !(query->Status & $FROZEN_COMMJAM)]; 
    query_vis_distance = -1; //reset query vis range

    if (closestcport->IsAlive!=1) {
        $SAY_GATE
        PERFORM SET_ADDITIONAL_PARAMS 0;
        PERFORM SET_ADDITIONAL_PARAMS2 0;
        PERFORM SET_OBJECTIVE 0;
        PERFORM NOTHING;
    }
}


// step 3: chronoport when a Slipgate or Chronoporter hierarchies to me
// step 4: run maveaway.ais script
//*********************************************
object CPorter = 0;
object myPorter = unit->NextSubordinate;
while (myPorter > 0){
    if (myPorter.Rank==$CHRONOPORTER_RANK || myPorter.Rank==$SLIPGATE_RANK) {
        CPorter = myPorter;
        myPorter = 0;
    }
    else myPorter = unit->NextSubordinate;
}
if (CPorter!=0) {
    PERFORM SET_OBJECTIVE $OBJECTIVE_CHRONOPORTED;
    PERFORM $ACTION_CAST op;
    PERFORM NOTHING;
}