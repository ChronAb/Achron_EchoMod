// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih

//advanced go back to idle
if (!(player->Advancements[$HUMAN_ADV_BASIC]) || unit->IsCommjam ) { 
    if (unit->IsCommjam) $SAY_JAMMED
	PERFORM SET_ADDITIONAL_PARAMS 0;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM SET_OBJECTIVE 0;
    PERFORM NOTHING;
}



if (player->$LCrystals >= $TANK_UPGRADE_LC && player->$QPlasma>=$TANK_UPGRADE_QP) {
    target = 25;
    int temp1 = unit->Position;
    PERFORM CAN_CLASS_FIT_AT temp1;
	if  ( perf_ret &  ( 1 << (unit->Rotation)  )  ) { //can fit with current rotation
		PERFORM SET_ADDITIONAL_PARAMS 0;
		PERFORM SET_ADDITIONAL_PARAMS2 0;
		PERFORM SET_OBJECTIVE 0;
		PERFORM $ACTION_SELF_UPGRADE $TANK_CLASS; //set the ActP to TANK's class. Heavy tank is $TANK2_CLASS
		PERFORM NOTHING;
    }
    else {
		int unitPosition = temp1; //unit position
		//find direction to move away from close units (cycle heavy query, may need 12k to complete)	
		int dir = 0;
		int counter = unit->AdditionalParameters2; //move counter to move in the same direction
		if (counter>0) {           //more than 0 means already moving in a direction
			counter = counter - 1; //decrease the counter
			PERFORM SET_ADDITIONAL_PARAMS2 counter;
			int rot = unit->Rotation; //get the unit's current rotation
			$DIR_FROM_ROT             //set the dir to move to based on that unit's rotation
		}
		else {  //no move counter stored, so query where to move to next
			//again, this is a cycle-heavy query, may need 12k cycles to complete
			dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [(400 - unitPosition <_> query) + QUERY VALUE [query] SUM [query.Length] WHERE [query->IsTerrainGround && query<_>unit<=36] ] WHERE [1];
			if (dir[0,8] >= 16) { counter = 0; } //moving up or down, so don't store counter
			else {
				counter = dir[16,8]; 			  //the counter is stored in the 3rd byte of dir
				if (counter > 7) { counter = 7; } //cap it at 7 since AdditionalParameters2 only has 3 bits
			}
			PERFORM SET_ADDITIONAL_PARAMS2 counter;
		}
		
		
		dir[16,8]=0; //clear out the 3rd byte that stores the counter
		if (dir && dir != $QUERY_EXHAUSTED) {  //continue to move to the same location
			int previousLocation = unit->ObjectiveParameters; //cache the previos location stored
			PERFORM SET_PARAM unit->Position;                 //store current location 
			PERFORM $ACTION_MOVE dir;  //move dammit!
			if ( perf_ret!=1) { 
				PERFORM SET_ADDITIONAL_PARAMS2 0;
			}
			
			int ap = unit->AdditionalParameters;
			if (ap == 1216) { // 19 << 6 = 1216  ap[$OBJECTIVE]==$OBJECTIVE_SELF_UPGRADE) { //was already moving out of the way
				//check if unit's new position after the move, is same as the previos cache'd location
				if (unit->Position == previousLocation) { //back to starting location, must be stuck so stop trying to move
					PERFORM SET_ADDITIONAL_PARAMS 0;
					PERFORM SET_ADDITIONAL_PARAMS2 0;
					PERFORM SET_OBJECTIVE 0;
					$SAY_OBSTACLE
					PERFORM $ACTION_ERROR1;
					PERFORM NOTHING;
				}
				
			} else {
				//first move, set ap to be this objective, and store starting location
				ap=0;
				ap[$OBJECTIVE]=$OBJECTIVE_SELF_UPGRADE; //ap is: 19 << 6 = 1216 
			}	
			
			PERFORM SET_ADDITIONAL_PARAMS ap;	
			PERFORM NOTHING;
		} else {		
			
			PERFORM SET_OBJECTIVE 0;
			PERFORM SET_ADDITIONAL_PARAMS2 0;
			$SAY_OBSTACLE
			PERFORM $ACTION_ERROR1;
		
		}
    }
} else {
    PERFORM SET_OBJECTIVE 0;
	PERFORM SET_ADDITIONAL_PARAMS2 0;
    $SAY_RESOURCES
    PERFORM $ACTION_ERROR1;
}