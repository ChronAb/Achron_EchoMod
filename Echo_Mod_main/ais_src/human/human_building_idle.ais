// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih

//
// human_building_idle.ais - the common idle script for most human buildings, 
//                             only works if smart idle is on

 
int setAdditionalParameters = 0;

  
int ap = unit->AdditionalParameters;
int smart = $SMART_IDLE;
int runSmartIdle = 0;
if (smart) { //do the following if smart idle is on
    
	PERFORM GET_CUR_TIME;
	//2654435761 shares no common factors with 2^31 used to create a 
	//hash for whether or not to run smartIdle abilities based on unit number
	//this way smart idle won't execute more ofter than once/15 ticks
	//for this unit, decreasing CPU load
	if (perf_ret[0,4] == (unit * 2654435761)[28,4]) {
		runSmartIdle = 1;
	}
	
	int healUseBit=0; 
	int healTaskBit=0; 
	int lookupUseBit=0;
	int flags = 0;
	int skip=0;  //for skiping over lookup/heal/recover requests if queue is busy
	
    /* Check if Damaged, and request a repair/healer unit */
    if (runSmartIdle) {
        int percent = (unit->HP * 100 / unit.MaxHP);
        object helper = ap[$STOREDUNIT];
        if (percent < 20) { //DAMAGED! 
            if (ap[$UNIT_BIT] && helper>0 && helper->ObjectiveParameters == unit) { //a healer unit might already be coming for this unit
				//wait for it
            }
            else { //no helper, or helper changed objective
				object heal = 0;
                #include common/include/unit_heal_request.ais
            }
        }
		else { //not damaged anymore, clear out the request
            if (ap[$UNIT_BIT] && helper > 0 && helper->ObjectiveParameters == unit ) { //a healer unit already responded 
                ap[$UNIT_BIT] = 0;
				setAdditionalParameters = 1;
                PERFORM SET_PARAM 0;
            }
        }
    }

    /* Check if this unit is being requested by another, do handshake and distance calculations */
    object lookupunit = unit;
    int find = $FLAGS[0,6]; // & 63;
	int hash = 0;
	int num = 0;
	
	object lookup = 0;
    //the unit 'hash' lookup table...
    #include common/include/unit_lookup.ais
    //$print "NUM: ", num, " find: ", find ,"\n";
    if (num == find) {    //somebody in field 'lookup' wants this unit...
       #include common/include/unit_lookup_response.ais
    }
    
    if (runSmartIdle) {
		int qstatus = 0;
        object helper = QUERY UNIT [unit] MIN [ unit <=> query ] WHERE 
						[ query->IsAlly==1 && ((qstatus=query->Status)&$FROZEN_COMMJAM ) && !qstatus[$TSS_BIT] && query.Rank >= $RP_RANK];
        /* Check status - request recover if comm jammed */
        if (helper > 0) { 
			#include common/include/unit_recover_request.ais
        }
    }
    
    PERFORM RAND;
    if (perf_ret < 4096) { // 0-32K
        target  = QUERY UNIT [unit] MIN [ unit <=> query ]
                WHERE [!(query->IsAlly) && (query->IsStasis == 1)];
		object tss=0;
        #include common/include/unit_tss_request.ais
    }
} //smart idle 

int uclass = unit->Class;

//int I=0;
//PRINT_AP;
