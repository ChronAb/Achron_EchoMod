// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.aih
#include human/human_building_idle.ais

//48 should be set for all unit's objective to 'cportMe'


//if not spun up, just idling, so don't look for units 1/2 times
int myStatus = unit->Status;
PERFORM GET_CUR_TIME;  
int current = perf_ret;


//gate is ready to cport
if (unit->Objective==0) {
	if (current%2==0) {
		int qrank = 0; //find unit that wants to chronoport but is too far away
		target = QUERY UNIT [unit] MIN [ query <_> unit ] WHERE [ query->IsAlly==1 && query.Rank>=$BUILDINGS_RANK && query->Objective==$OBJECTIVE_CHRONOPORT && 
																  query->AdditionalParameters[1,5] > 0 &&  //has a wait counter
																  (qrank=(query->Commander).Rank)!=$CHRONOPORTER_RANK && qrank!=$SLIPGATE_RANK ];
		if (target->IsAlive==1) {
			PERFORM $ACTION_SET_COMMANDER_TO unit; //set self as its commander
		}
	}
    //get the maximum chronoporting distance in ticks
    PERFORM GET_MAX_CHRONOPORT_DISTANCE;
    int cport_max = perf_ret;
	
	PERFORM GET_RECHRONOPORT_DELAY;
	int rechronoportdelay = perf_ret;
    
	int timeSinceLastChronoport=0;
	int qStatus = 0;

	//subordinates of this gate are units that chose this gate as the one to use
	while (1) {
		target = unit->NextSubordinate;
		if (target>0) {
			if ( target->IsAlive==1) {
			
				if (target.Rank<$BUILDINGS_RANK) { continue; } // ignore building subordinates  (unit # churn)
			
				int op = target->ObjectiveParameters;
				//check if destination falls within chronoporting distance
				if ( abs(op - current) < cport_max ) {		
				
					if (!myStatus[$CAP_BIT_2] ) {    //make sure Cporter is spun up
						PERFORM $ACTION_SPINUP;      //this action sets cap_bit_2 and does the animation         
						$SET_AP
						PERFORM NOTHING;
					}
										
					PERFORM $ACTION_SET_COMMANDER_TO 0;
					PERFORM $ACTION_TIMEPORT target; 
				} 
			
			
			
			}
			else { continue; } //inaccessible subordinate, get the next one
		} 
		else { break; } //stop looking for subordinates
	}
	
}

#include common/include/unit_autopilot_building.ais

$SET_AP
