// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.ais
//#include common/include/human_idle.ais


if (myStatus[$CAP_BIT_4]) {    //already inside
	PERFORM SET_ADDITIONAL_PARAMS2 0; 
	PERFORM SET_OBJECTIVE 0; 
	PERFORM NOTHING; 
}

object tank = unit->ObjectiveParameters;  
target = 0;
if (tank->IsAlive==1) {     //is a healthy tank stored in the marine's OP ?
	int tankRank = tank.Rank;
    if ((tankRank == $TANK_RANK || tankRank == $TANK2_RANK || tankRank==$MAR2_RANK ) 
            && tank->HP >= 0.4*tank.MaxHP && !((tank->Status)[$CAP_BIT_4])) { 
        target = tank;
    }
}

if (target==0) {  // no tank stored
	int tankRank = myCommander.Rank;
    if ((tankRank == $TANK_RANK || tankRank == $TANK2_RANK || tankRank==$MAR2_RANK ) && 
            commanderObjective==0 && myCommander->HP >= 0.4*myCommander.MaxHP &&
            !((myCommander->Status)[$CAP_BIT_4])) {   //go inside commander tank
        target= myCommander; 
    } 
    else {                                              //otherwise look for another tank
		int qrank = 0;
        target = QUERY UNIT [unit] MIN [unit <_> query] 
                WHERE [query->Objective == 0 && query->IsAlly==1  && 
                ((qrank=query.Rank)==$TANK_RANK || qrank==$TANK2_RANK || qrank==$MAR2_RANK) &&
                query->HP >= 0.4*query.MaxHP && !(query->Status[$CAP_BIT_4])];
    }
}

                
if (target) {
  PERFORM SET_PARAM target;
  if (target<_>unit >= 9 ) { //move towards tank if 3 spaces or more away 

	int dir = 0;
	int counter = unit->AdditionalParameters2; //move counter to move in the same direction
	if (counter>0) {           //more than 0 means already moving in a direction
		counter = counter - 1; //decrease the counter
		PERFORM SET_ADDITIONAL_PARAMS2 counter;
		int rot = unit->Rotation; //get the unit's current rotation
		$DIR_FROM_ROT             //set the dir to move to based on that unit's rotation
	}
	else {  //no move counter stored, so query where to move to next
		
		ignore_collision_with_unit = target;
		dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [ target <_> query ] WHERE [1];    
		if (dir[0,8] >= 16) { counter = 0; } //moving up or down, so don't store counter
		else {
			counter = dir[16,8]; 			  //the counter is stored in the 3rd byte of dir
			if (counter > 7) { counter = 7; } //cap it at 7 since AdditionalParameters2 only has 3 bits
		}
		PERFORM SET_ADDITIONAL_PARAMS2 counter;
	}

	dir[16,8] = 0; //clear out the 3rd byte that stores the counter
	if (dir && dir != $QUERY_EXHAUSTED) {
		PERFORM $ACTION_MOVE dir; 
		if ( perf_ret!=1) { 
			PERFORM SET_ADDITIONAL_PARAMS2 0;
		}
	}   
  }
}    
else {
    //cap bit 4 is set when picked up
	if(!(myStatus[$CAP_BIT_4]))  $SAY_HITCH 
	PERFORM SET_ADDITIONAL_PARAMS2 0;
    PERFORM SET_OBJECTIVE 0;
}    
