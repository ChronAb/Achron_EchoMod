/********************************
* Observer alliance and vision controller by Shadowfury333 and ChronA
*
* This is the core of the Observer monitor. It is used to make sure all connected observers are
* able to see what all players are doing, and vice versa.
*
* Defines: none
*
* Global vars used: obs
*                   contenders
*				   	nonPlayer
*                   playerCount
*
* Global vars defined: none
*
********************************/

#define CONTENDER_CHECK num = $GET_UNIT_COUNT \
        [ query->Owner == x && query.Rank >= $MARINE_RANK]; \
    if (num > 0) { \
        contenders = contenders | (1<<x); \
        obsMe = 0; \
    } else { \
        num = $GET_UNIT_COUNT [ query->Owner == x && query.Rank >= $FACTORY_RANK]; \
        player = x; \
        if (num > 0 && (player->$LCrystals > 0 || player->$QPlasma  > 0)){ \
            contenders = contenders | (1<<x); \
            obsMe = 0; \
        } \
    }


/***********************************************
    Intitialize observer status of active players
***********************************************/
if (current == present && present == 1) {
	int num = 0;
    int obsMe = 1;
	int x = 0;
	int firstObsNum = 0;

	//loop through the 14 players
	for (x = 0; x<14; x=x+1) {
		if((enabled>>x)&1 && ((nonPlayer>>x)&1)){
            // Enabled players who start with no liquid military assets become observers
            $CONTENDER_CHECK
            
            if (obsMe == 0){
                playerCount = playerCount + 1;
            }
            
            if (obsMe > 0){
                num = $GET_UNIT_COUNT [ query->Owner == x && query.Rank == $RACE_CHOOSER_RANK];
                if (num > 0) obsMe = 0;
            }
            
            if (obsMe > 0 ){
                if (!firstObsNum){
                    //Set initial obs number, to allow it to work in replays
                    firstObsNum = x; 
                }
                obs = obs | (1<<x);
                num = 0;
            }
		}
        obsMe = 1;
	}

	//Remove all inactive obs, but keep the main one in replays, provided there are observers
    int unusedObs = 0;
	PERFORM IS_REPLAY;
	if(!perf_ret||firstObsNum==0){unusedObs = obs&(~connected)&enabled;}
	else {unusedObs = obs&(~connected)&enabled&(~(1<<firstObsNum));}

	//Reset the observer mask to only include observers that should stay alive
	if(perf_ret){obs = (obs&connected)|(1<<firstObsNum);}
	else {obs = (obs&connected);}
    contenders = (contenders&connected);
    obsfield = contenders<<14 | obs;
	target = $OBS_AF;
	PERFORM SET_ACHRONAL_FIELD obsfield;
    
    //Enable contender players' timewaves on the timeline
    PERFORM SET_PLAYER_TIMEWAVE_VISIBILIY contenders;
    
    //Update Player Count
    target = $PLAYERCOUNT_AF;
    PERFORM SET_ACHRONAL_FIELD playerCount;

	//Make all unused observers lose quietly
	PERFORM PLAYER_LOST unusedObs;
	af2[15,14] = af2[15,14] | unusedObs;
	target = 2; PERFORM SET_ACHRONAL_FIELD af2;

	//Make all remaining obs unable to control units or manually make alliances
	//PERFORM PLAYER_DISABLE_UNIT_CONTROLS obs;
}

/***********************************************
    loop through players:
        share vision with the observers,
        convert players to contenders or 
        observers per their circumstances
***********************************************/
if(current%9==3){
	int allymask = 0;
	int visionmask = 0;
	int x = ((current-3)/9 + 12)%14; 
    // (for some reason this starts at P2 without the + 12 offset)

    // Share vision with the observers
    player = x;
    PERFORM IS_REPLAY;
    if (perf_ret){
        say_to_var "SMReplayStats"; say 1;
    }
    allymask = player->Allies;
    if (((obs&enabled)>>x)&1){
        say_to_var "SMObsStats"; say 1;
        PERFORM SET_PLAYER_VISIBILITY_SHARING (obs|connected|active);
        PERFORM SET_PLAYER_ALLIANCES allymask | obs;
    } else if ( ((active|connected)>>x)&1) {
        visionmask = player->VisibilitySharing;
        PERFORM SET_PLAYER_VISIBILITY_SHARING visionmask | obs;
        // PERFORM SET_PLAYER_ALLIANCES allymask;
    }
	
    // Non-observers update their type:
    /*  * Contenders who surrender become Observers
            (contenders with no units at the IP get surrendered by echoVictory.rsi)
        * Participants who get military assets become Contenders
    */
    if (~(obs>>x)&1) {
        int num = 0;
        int obsMe = 1;
        
        // Contenders who surrender (or disconnect) become Observers
        if ((contenders>>x)&1 && !((active>>x)&1)){
            obs = obs | (1<<x);
            contenders = contenders & ~(1<<x);
            obsfield = contenders<<14 | obs;
            target = $OBS_AF;
            PERFORM SET_ACHRONAL_FIELD obsfield;
            
            playerCount = playerCount - 1;
            target = $PLAYERCOUNT_AF;
            PERFORM SET_ACHRONAL_FIELD playerCount;
            PERFORM SET_PLAYER_TIMEWAVE_VISIBILIY contenders;
            
            if ((af2 >> (15 + x) & 1) == 0) {
                PERFORM PLAYER_LOST (1 << x); //player x lost
				
                //update af2
				af2 = af2 | ( 1 << (x + 15));
				target = 2; PERFORM SET_ACHRONAL_FIELD af2;
                
                //notify other players of the player x's elimination
                print "UPDATE:   Player ", x+1, " was eliminated";
				/*int x =0;
				for (x=0;x<=15;x=x+1) { //notify other players of this player's surrender
					if ( ( enabled >> x) & 1 == 1 ) {
						player = x;
						say "UPDATE:   Player ", p+1, " has surrendered";
					}
				}*/
			}
        }
        
        if (!(contenders>>x)&1){
            // Participants who get military assets become Contenders
            $CONTENDER_CHECK
            if (obsMe == 0) {
                contenders = contenders | (1<<x);
                obsfield = contenders<<14 | obs;
                target = $OBS_AF;
                PERFORM SET_ACHRONAL_FIELD obsfield;
                
                playerCount = playerCount + 1;
                target = $PLAYERCOUNT_AF;
                PERFORM SET_ACHRONAL_FIELD playerCount;
                PERFORM SET_PLAYER_TIMEWAVE_VISIBILIY contenders;
            }
        }
    }
}

// Debugging
if(0 && current == present && current%90==0){
    print "PC: ", playerCount, " Cdrs: ", contenders, " Obs: ", obs, "\n";
}