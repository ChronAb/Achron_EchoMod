/*************************************
Resource display for observers by Shadowfury333 and ChronA

Displays contender resources to all observers.

First section grabs relevant values for each contender and sets them to appropriate AFs.
    If a value is synchronized with the skin here a synced bit is set.
Second section says the values to the skin. This only happens if the synced bit for 
    that value is clear. After a say, the synced bit is set.
Field usage varies depending on number of enabled players and observers

Defines:  
    PLAYERCOUNT_AF 118 : Field for player number storage
        CURR_TIME_RATE_START_AF 121 : Start Field for current player time rate
        CURR_TIME_RATE_Y_AF 121+y : Field for current player time rate, y is current observer
        RESOURCESAY_START_AF 122 : Starting point for resource storage

Global vars used: obs

Fields: 
    118 :  bits 0-3: playerCount - Stores the number of non-observer players
        enabled on the map
    121 to 135 : Stores current time rate for all players in 2-bit chunks

    136 to 1036 : Used to store player resources and tech for each observer
        Per observers fields are needed to avoid race conditions on resource data.
        Per player fields are necessary for observer stats in replays while looking 
            from player POV.

    136+4n : Used to store Vecgir Power (bits 0-27)
    137+4n : Used to store Liquid Crystal (bits 0-18), and player race (bits 19-20),
        SmartIdle (bit 22), Auto-Hierarchy (bit 21), whether a Comm building exists (bit 23),
        and whether LC has been synced (bit 24), whether Race has been synced (bit 25),
        whether Tech has been synced (bit 26), and whether Power has been synced (bit 27).
        In assassin mode, also contains the status of the Achron (bit 28).
    138+4n : Q-Plasma(bits 13-29), CESO Reserves(bits 0-12),
        and whether Q-Plasma or Reserves has synced (bits 31 and 30 respectively)
    139+4n : Used to store Tech. First 16 bits are researched tech, last 16 bits 
        are tech in progress

Global vars defined:
    y : mentioned for code safety's sake. This is defined in other code as well.
        So far, no issues.
    playerCount : Stores the number of non-observer players enabled on the map
    nonObsPlayerMask : Stores a mask of players who are not obs and active at game start, 
        for skin stats display
*************************************/

#define CURR_TIME_RATE_START_AF 121
#define CURR_TIME_RATE_Y_AF 121+y

#define RESOURCESAY_START_AF 136
//AF offsets as defines for Player x
#define P_X_POW_AF 4*x + 4*15*(y) + $RESOURCESAY_START_AF
#define P_X_COMM_RACE_LC_AF 4*x + 4*15*(y) + 1 + $RESOURCESAY_START_AF
#define P_X_QP_RES_AF 4*x + 4*15*(y) + 2 + $RESOURCESAY_START_AF
#define P_X_ADV_AF 4*x + 4*15*(y) + 3 + $RESOURCESAY_START_AF

#define LC_BITS 0,19
#define RACE_BITS 19,2
#define COMM_BITS 21,3

#define ADV_BITS 0,16
#define ADV_INCOMPLETE_BITS 16,16

#define LC_SYNCED_BIT 24,1
#define RACE_SYNCED_BIT 25,1
#define ADV_SYNCED_BIT 26,1
#define POW_SYNCED_BIT 27,1

#define QP_BITS 13,17
#define RES_BITS 0,13

#define QP_SYNCED_BIT 31,1
#define RES_SYNCED_BIT 30,1

#define ACHRON_DEAD_BIT 28,1

int y = 0;

/***********************************************
    For each Obs: grab relevant values
        and store them in achronal fields
***********************************************/
for (y=0; y<14; y=y+1){
    //If we are in a replay, make sure all players get data
    PERFORM IS_REPLAY;
    if((((obs&connected)>>y)&1)||(perf_ret&&((enabled>>y)&1))){
        PERFORM GET_PLAYER_TIME y;
        int currentObsTime = perf_ret;
    
        // Write player information to achronal fields
        if (TwicePerSecond && current == currentObsTime){
            //Get information for each contender to each obs from each obs's current time
            int x = 0;
            for( x=0; x<14; x=x+1){
                #include include/obsResourceStore.rsi
            }
        }


        //Send team information to skin variables:
        //Send information as bits 0-3: Number of players
        //            bits 4-18: Bitmask of all 15 players.
        if (current == present && TwicePerSecond && present >= 720){
          player = y;
          say_to_var "SMObsPlayerNum";
          say (playerCount | (contenders<<4));
          //print "PC: ", playerCount, "\n";
        }


        //Read Player Stats Out to the Skin:
        int x = current % 18;
        player = x;
        if (current==present && x <= 13 && ((contenders>>x)&1)) { 
            //cycle through all 14 players only if they are enabled
            #include include/obsResourceDisplay.rsi
        }
    }
}