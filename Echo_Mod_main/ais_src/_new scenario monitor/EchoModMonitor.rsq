//Echo Ops Mod - original script
//Contributed by Dallas "ChronAberant" Joder

#include include/monitorHeader.rsh

//----------------------------------------------
// Echo Ops Mod - Common Scenario Monitor
//----------------------------------------------

/***********************************************
To Do:
* Victory conditions need a tie-breaker provision
* Should add an IP elimination process for when players have no assets
* Observer skin needs to re-initialize each time a new contender is added
    This will require adding a new reset process to the skin code
* Assassin mode
************************************************
***********************************************/

//----------------------------------------------
// Chronal Variable Definitions
//----------------------------------------------
int PLAYER_DEAD_MODE 	= $NON_PRODUCING;
int END_GAME_MODE		= $TOTAL_DEFEAT;

PERFORM CONVERT_SECONDS_TO_TICKS 1;
int TICKS_PER_SECOND = perf_ret;

// Temporal coordinates
PERFORM GET_PRESENT_TIME;
int present = perf_ret;    
PERFORM GET_CUR_TIME;
int current = perf_ret;
PERFORM GET_TIME_WINDOW_START;
int im_past = perf_ret;

// meta-temporal coordinate
int metatime = current-present; 

// Map dimensions
PERFORM GET_MAP_WIDTH; 
int mapX = perf_ret;
PERFORM GET_MAP_LENGTH; 
int mapY = perf_ret;

// Global utility variables
object queryOwnr = 0;
int uOwnerAllies = 0;
int allymask = 0;
#define PLAYER_HUMAN (player->CustomField8)[0] == 1
#define PLAYER_GREKIM (player->CustomField8)[1] == 1
#define PLAYER_VECGIR (player->CustomField8)[2] == 1
#define PLAYER_V_PTS (player->CustomField8)[5,4]
#define TEAM_V_PTS (player->CustomField8)[10,5]

//----------------------------------------------
// Achronal Variable Definitions
//----------------------------------------------
// Achronal field 37 stores victory timestamps
PERFORM GET_ACHRONAL_FIELD 37; 
int af37 = perf_ret;  
int supremacyTime = af37;

// Achronal field 38 stores exit engine timestamps
PERFORM GET_ACHRONAL_FIELD 38; 
int af38 = perf_ret;
int exitEngineTime = af38;

//----------------------------------------------
// Player Variable Definitions (Chronal + Achronal)
//----------------------------------------------
/*
Achronal field 2 is used to store connected and surrendered players
    bits 0-14 af2[0,15] are used to store originally connected players 
        for disconnect notification
    bits 15-28 af2[15,14] are used to mark surrendered and lost players
        for surrendered notification
    bits 29-31 unused
*/
PERFORM GET_ACHRONAL_FIELD 2;
int af2 = perf_ret;

// Player Types:
// enabled - designated as participants when the map started
PERFORM GET_ENABLED_PLAYERS;
int enabled = perf_ret;

// connected - players currently connected to the game
PERFORM GET_CONNECTED_PLAYERS;
int connected = perf_ret;

// active - players who have not lost yet
PERFORM GET_ACTIVE_PLAYERS;
int active = perf_ret;

// timelineControllers - players who can move on the timeline
PERFORM GET_TIMELINE_CONTROLS_PLAYERS;
int timelineControllers = perf_ret;

// neutral player control flag
#define IS_NEUTRAL (player->ControlFlags)[5]

/*
Achronal field 116 is used to store observers
    bits 0-13 obsfield [0,14] are used to store Observers -- players without any 
        racepickers or liquid military assets. These can have an AI player to 
        provide visibility sharing.
    bits 14-27 obsfield [14,14] are used to store Contenders -- players who 
        have military assets. They share thier vision and resource data with 
        observer players.
    bits 28-31 obsfield [28,4] are used to store the contender count
*/
#define OBS_AF 116
PERFORM GET_ACHRONAL_FIELD $OBS_AF;
int obsfield = perf_ret;
int obs = perf_ret[0,14];
int contenders = perf_ret[14,14];

/*
Achronal field 117 is used to store AI players
*/
#define AIPLAYER_AF 117
PERFORM GET_ACHRONAL_FIELD $AIPLAYER_AF;
int aiPlayer = perf_ret;

/*
Achronal field 118 is used to store the contender count
*/
#define PLAYERCOUNT_AF 118
PERFORM GET_ACHRONAL_FIELD $PLAYERCOUNT_AF;
int playerCount = perf_ret[0,4];
//int nonObsPlayerMask = perf_ret[4,15];

/*
Achronal field 120 is used to store non-players
    These players start the game with no assets, and should thus become observers 
*/
#define NONPLAYER_AF 120;
PERFORM GET_ACHRONAL_FIELD $NONPLAYER_AF;
int nonPlayer = perf_ret;

//----------------------------------------------
// Credits Bulletin
//----------------------------------------------
if(current == present && present == 1){
	int x = 0;
	for(x=0;x<15;x=x+1){
		if((enabled>>x)&1){
			player = x;
			say "Echo Mod Observer Monitor v1.0.0";
			say_to_var "";
			say "By ChronAberant, Shadowfury333, & IphStich";
		}
	}
}

//----------------------------------------------
// Timeline Setup
//----------------------------------------------

/***********************************************
    Slow Timeline Options:
        Sets the timeline speed to 0.5 (because Echo Mod is really busy)
        Or pause the present at match start until a player moves up the timeline
***********************************************/
PERFORM GET_PRESENT_TIME_WAVE_TIME_RATE;
int presentRate = perf_ret_float;

// Slow Timeline:
if(0 && current == present && present == 1){    
    if(presentRate >0.5) {
        perf_ret_float=0.5;
        PERFORM SET_PRESENT_TIME_WAVE_TIME_RATE;
    }
}
// Paused Timeline:
if(1){
    //start pause
    if(current == present && present == 90){
        if(presentRate >0){
            perf_ret_float=0;
            PERFORM SET_PRESENT_TIME_WAVE_TIME_RATE;
        }
    }
}
    
//end pause
if(presentRate==0){
    int x = 0;
    for(x=0;x<15;x=x+1){
        PERFORM GET_PLAYER_TIME x;
        if(current==perf_ret && current >= 2160 && 
                ((contenders>>x)&1 || (obs>>x)&1)){
            perf_ret_float=1;
            PERFORM SET_PRESENT_TIME_WAVE_TIME_RATE;
        }   
    }
}
//**********************************************

/***********************************************
    Static Timeline Option:
        Causes the timeline to stop just as the UPP edge enters the
        left edge of the timeline
        >> Currently disabled
**********************************************
if(pre_game_settings[$MP_ASSASSIN_MODE] && presentRate > 0){
	PERFORM GET_META_TIME;
	int metaTimeNow = perf_ret;
	
	PERFORM GET_PRESENT_TIME_WAVE_FIXED_TIME;
	int pastLength = perf_ret;

	PERFORM GET_UNPLAYABLE_PAST_DURATION;
	int uppLength = perf_ret;

	if(metaTimeNow == pastLength-uppLength){
		perf_ret_float=0.0;
		PERFORM SET_PRESENT_TIME_WAVE_TIME_RATE;
	}
}
**********************************************/

//----------------------------------------------
// Game and Player Setup
//----------------------------------------------
/*
* All enabled players start out designated as _~participants~_
* Participants who have no units become ~observers~
* Participants who have military units become ~contenders~
* Contenders who have no units or buildings, or who surrender,
*   become Observers
* Observers see the units and resources of Contenders
    but only the units and not the resources of Participants
*/

//compute players' nomalized resource stat for their timelines
#include include/commonStatsAndPlayerUpdates.rsi

//notify players if someone disconnects
#include include/checkConnected.rsi

//Initialize nonPlayers, aiPlayers, & neutral players
if(1 && current == present && present == 2){
	int x = 0;
	for (x = 0; x<15; x = x + 1){
        player = x;
		if ((enabled>>x)&1){			
			int playerNum = x;
            
            //nonPlayer
			int class = 0;
			#include include/calculatePlayerHealth.rsi
			if (playerHealth == 0) nonPlayer = nonPlayer | (1<<x);
            
            //neutral
			if ($IS_NEUTRAL) nonPlayer = nonPlayer | (1<<x);
            
            //aiPlayer
            if (player->IsComputerPlayer == 1) aiPlayer = aiPlayer | (1<<x);
		}
	}
	
	target = $NONPLAYER_AF;
	PERFORM SET_ACHRONAL_FIELD nonPlayer;
    
    target = $AIPLAYER_AF;
	PERFORM SET_ACHRONAL_FIELD aiPlayer;
}	

//Create Obs alliances and vision sharing
#include include/obsAlliances.rsi

//Tell observers about all resources
#include include/obsResource.rsi

//check to see if the game is over and set tournament win pip, if tournament display is on
//#include include/tournamentWinHandler.rsi

/***********************************************
    Ally Vision Sharing:
        Share vision between allies and to observers
***********************************************/
// auto-share vision between allies at game start
if(current == 3){
	int p = 0;
    allymask = 0;
	
	for (p = 0; p < 12; p=p+1) {
		player = p;
		if ( (enabled>>p)&1) {
			allymask = player->Allies;
			PERFORM SET_PLAYER_VISIBILITY_SHARING allymask;
		}
	}
}

/***********************************************
    Computer Player Nanite Delegation:
        At game start, give nanite control of any computer controlled 
        Species Selector or Landing Probe to the nearest human player.
***********************************************/
#include include/aiRemoteControl.rsi

//----------------------------------------------
// Victory Conditions
//----------------------------------------------
#include include/echoVictory.rsi

//----------------------------------------------
// Assassin Mode
//----------------------------------------------

//----------------------------------------------
// AI Gameplay
//----------------------------------------------

// Map AI Definitions
//*******************************
#define GOTO_TIME if (present == _mTime $seconds) { \
        PERFORM SET_PLAYER_TIME (_tTime $seconds); \
        PERFORM SET_PLAYER_TIME_RATE _tRate; }

#define OWN_OR_ALLY ( (queryOwnr = query->Owner) == _uOwner || \
    (uOwnerAllies & 1<<queryOwnr) > 0 || \
    _uOwner==-1 )
    
#define PICK_GRUNT query.Rank >= $MARINE_RANK && \
        query->Objective == 0 && \
        $OWN_OR_ALLY && \
        queryOwnr <= _maxOwner && \
        queryOwnr->IsComputerPlayer && \
        query<_>_dest > 400 && \
        query->Carrier<= 0 && \
        (queryPos = query->Position)[$Xpos] >= _minX && \
        queryPos[$Xpos] <= _maxX && \
        queryPos[$Ypos] >= _minY && \
        queryPos[$Ypos] <= _maxY && \
        queryPos[$Zpos] >= _minZ && \
        queryPos[$Zpos] <= _maxZ

#define PICK_LAZY_GRUNT_FROM_POSITION QUERY \
    UNIT [unit] MIN [query->Age * query->Age + query<_>_dest] \
    WHERE [ $PICK_GRUNT ];
    
#define PICK_RAIDER ( (_qrank = query.Rank)==$CUTTLE_RANK || \
    _qrank==$OCTO_RANK || _qrank==$SEPIPOD_RANK || \
    _qrank==$PHAROPOD_RANK || _qrank==$SEPILIGO_RANK || _qrank==$SEPIPOD_RANK || \
    _qrank==$ATHC_RANK || _qrank==$LANCER_RANK || _qrank==$TANK_RANK || \
    _qrank==$TANK2_RANK || _qrank==$TORNADE_RANK) && \
    query->Carrier<= 0
    
#define PICK_PORTAL (query->Class == 4048 || query->Class == 4050) && \
        $OWN_OR_ALLY && \
        queryOwnr <= _maxOwner && \
        queryOwnr->IsComputerPlayer && \
        (queryPos = query->Position)[$Xpos] >= _minX && \
        queryPos[$Xpos] <= _maxX && \
        queryPos[$Ypos] >= _minY && \
        queryPos[$Ypos] <= _maxY && \
        queryPos[$Zpos] >= _minZ && \
        queryPos[$Zpos] <= _maxZ
                            
#define DEPLOY_MINIONS player = _uOwner; \
    uOwnerAllies = player->Allies; \
    if ( current >= _minT && current < _maxT + _recruit && \
        (current - _minT)%_everyT < _recruit && \
        metatime >= _minM && metatime <= _maxM && \
        (player->IsComputerPlayer || _uOwner==-1) \
    ) { \
        _underling = 0; \
        _underling = $PICK_LAZY_GRUNT_FROM_POSITION \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_ATTACKPOS_DISPATCH; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKING_TIMER ( current >= _minT && current < _maxT && \
        (current - _minT)%_everyT == 0 && \
        metatime >= _minM && metatime < _maxM && \
        player < 14 && (player->IsComputerPlayer || _uOwner==-1) )
                            
#define MAKA_REAPH player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_GREKIM && player->$QPlasma > 0) { \
        if (_underling->Class != $SEPI_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $SEPI_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_MORPH_REAPH; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Reaph dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_MOUND player = _uOwner; \
    if ($MAKING_TIMER  && $PLAYER_GREKIM && player->$QPlasma > 0) { \
        if (_underling->Class != $SEPI_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $SEPI_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_MORPH_COMM; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Mound dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_SPYRE player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_GREKIM && player->$QPlasma > 0 && \
            (player->Advancements)[$GREKIM_ADV_AUTODEFENCE]) { \
        if (_underling->Class != $PHARO_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $PHARO_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_MORPH_SPYRE; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Spyre dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_ARCT player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_GREKIM && player->$QPlasma > 0) { \
        if (_underling->Class != $PHARO_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $PHARO_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_MORPH_ARCTICUS; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Arct dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_ARCT_LT player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_GREKIM && player->Advancements[$GREKIM_ADV_LOLIGO] && \
            player->$QPlasma > 0) { \
        if (_underling->Class != $PHARO_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $PHARO_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_MORPH_ARCTICUS; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Arct dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_DOME player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_GREKIM && player->$QPlasma > 0) { \
        if (_underling->Class != $OCTO_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $OCTO_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_MORPH_DOME; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Turret dispatch order ", DMDebug; \
            } \
        } \
    }

#define MAKA_IMPORTER player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_HUMAN && player->$QPlasma > 0) { \
        if (_underling->Class != $ATHC_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $ATHC_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_BUILD_IMPORTER; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Turret dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_FAC player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_HUMAN && player->$LCrystals > 400) { \
        if (_underling->Class != $ATHC_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $ATHC_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_BUILD_FACTORY; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Turret dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_MFAB player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_HUMAN && player->$QPlasma > 0) { \
        if (_underling->Class != $ATHC_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $ATHC_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_BUILD_MACROFAB; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Turret dispatch order ", DMDebug; \
            } \
        } \
    }

#define MAKA_TOWER player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_HUMAN && player->$QPlasma > 0) { \
        if (_underling->Class != $ATHC_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $ATHC_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_BUILD_TURRET; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Turret dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_SENSOR player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_HUMAN && player->$QPlasma > 0 && \
            (player->Advancements)[$HUMAN_ADV_BASIC]) { \
        if (_underling->Class != $ATHC_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $ATHC_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_BUILD_SENSOR_TURRET; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Turret dispatch order ", DMDebug; \
            } \
        } \
    }
    
#define MAKA_TPORTER player = _uOwner; \
    if ($MAKING_TIMER && $PLAYER_HUMAN && player->$QPlasma > 0) { \
        if (_underling->Class != $ATHC_CLASS && _underling.Rank != $AMPLIFIER_RANK) { \
            _underling = 0; \
            _underling = QUERY UNIT [unit] MIN [query<_>_dest - query->HP] \
                WHERE [ query->Class == $ATHC_CLASS && \
                    (queryOwnr = query->Owner) == _uOwner && \
                    queryOwnr->IsComputerPlayer && \
                    query->Carrier<= 0 \
                ]; \
        } \
        if (_underling>0) { \
            target = _underling; \
            _obj = $OBJECTIVE_BUILD_TELEPORTER; \
            $DISPATCH_OBJECTIVE \
            if (DMDebug>0) { \
                player = 0; \
                print " Turret dispatch order ", DMDebug; \
            } \
        } \
    }

// AI-Processes variable initialization
object _underling = 0;
object _firstpick = 0;
int _qrank = 0;
int _uOwner = -1; int _maxOwner = 11;
int _mTime = 0; int _tTime = 0; int _tRate = 0;
int _minM = -10800; int _maxM = 0;
    // IP: -600, UPP: -390, present: 0, UP future: 120
int _minX = 0; int _maxX = 0;
int _minY = 0; int _maxY = 0;
int _minZ = 0; int _maxZ = 100;
_dest[$Zpos] = 0;
int _minT = 0; int _maxT = 0;
int _everyT = 1; int _recruit = 1;
int DMDebug = 0;


/* Common AI processes
*********************************/

// Ephemeral units dispatching:
if (1 && current%108 == 83) {
    // - units with limited lifespan get sent to fight right away
    // - check and send one order every 6 s
    object underling1 = 0;
    int u1Owner = 0;
    object enemy1 = 0;
    underling1 = QUERY UNIT [unit] MAX [query->Age] WHERE [ 
            query->Class == $TODARO_CLASS && 
            query->Energy <60 && 
            query->Objective == 0 && 
            (query->Owner)->IsComputerPlayer
        ];
        
    if (underling1!=0) {
        u1Owner = underling1->Owner;
        player = u1Owner;
        uOwnerAllies = player->Allies;
        
        enemy1 = QUERY UNIT [unit] MAX [ query<_>underling1 - 0.01*(query->HP)**2] WHERE [ 
                (queryOwnr = query->Owner) != u1Owner &&
                (uOwnerAllies & 1<<queryOwnr) < 1 &&
                queryOwnr < 14 &&
                (underling1->Name)%4 == (query->Name)%4 &&
                !(query->IsCloaked)
            ];
        
        _dest = enemy1->Position;
        target = underling1;
        _obj = $OBJECTIVE_ATTACKPOS_DISPATCH;
        $DISPATCH_OBJECTIVE
    }
    _dest[$Zpos] = 0;
}

// Idle RP taskmaster:
if (1 && current>120$seconds && current%(9$seconds) == 5$seconds) {
    // - Idle RPs get tasked to the nearest red crate < 150 sq distant
    // - if no red crate is found -> send to the nearest blue crate with an opening
    // - check and send one order every 18 s
    object idleRP = 0;
    idleRP = QUERY UNIT [unit] MIN [1] WHERE [ 
            query.Rank == $RP_RANK &&
            query->Objective == 0 &&
            (query->Owner)->IsComputerPlayer ];
            
    if (idleRP!=0) {
        object resCrate = 0;
        // 1st try to find a nearby red crate 
        resCrate = QUERY UNIT [unit] MIN [query<_>idleRP] WHERE [ 
                query->Class == $QP_CLASS &&
                query<_>idleRP > 400 &&
                query<_>idleRP < 22500 ];
               
        // 2nd try to find a nearby blue crate 
        if (resCrate==0) {
            resCrate = QUERY UNIT [unit] MIN [query<_>idleRP] WHERE [ 
                    query->Class == $LC_CLASS &&
                    query<_>idleRP > 900 &&
                    query->Armour < query.MaxArmour ];
        }
        
        // 3rd find any crate
        if (resCrate==0) {
            resCrate = QUERY UNIT [unit] MIN [query<_>idleRP] WHERE [ 
                    (query->Class == $QP_CLASS ||
                    ( query->Class == $LC_CLASS && 
                    query->Armour < 3 )) &&
                    query<_>idleRP > 900 ];
        }
        
        if (resCrate!=0) {
            target = idleRP;
            _dest = resCrate->Position;
            _dest[$Zpos] = 0;
            _obj = $OBJ_BLDG_MOVE;
            $DISPATCH_OBJECTIVE;
            
            /*int x = 0;
            for(x=0;x<15;x=x+1){
                
                PERFORM GET_PLAYER_TIME x;
                if( current==perf_ret && ((enabled>>x)&1) ){
                    player = x;
                    say "Moving Idle RP ", idleRP;
                }
                
            }*/
        }
    }
}