//Contributed by Dallas "ChronAberant" Joder
#include EchoModMonitor.rsq

//----------------------------------------------
// Echo Ops Mod:
// Titanomachy - AI Gameplay
//----------------------------------------------

/***********************************************
To Do:
* More AI behaviors
* Achronal reactivity
* Randomization
* BASE1 should kill its Macrofab rocks
* BASE1 needs another rally point
************************************************
***********************************************/

// Definitions
//*******************************

// Big attack start metatime: -90 seconds;
#define BigAtkMT -1620
//#define BigAtkMT (2*present) <| (720 $seconds)

// Small attack start metatime: -150 seconds
#define SmlAtkMT -2700
//#define SmlAtkMT (2*present) <| (720 $seconds);

if (current < 10 $seconds) PERFORM NOTHING;

// Capturable unit numbers and owners
object AMPa1 = 110; // 9:00
object AMPb1 = 112; // 3:00

object AMPa2 =  98; // 11:00
object AMPb2 =  67; // 5:00

object AMPa3 = 108; // 12:00 mid
object AMPb3 = 107; // 6:00 mid

object AMPa4 =  81; // 9:00 mid
object AMPb4 =  63; // 3:00 mid

object AMPa5 =  37; // 8:30
object AMPb5 =  56; // 2:30

object AMPa6 = 121; // 1:00
object AMPb6 = 128; // 7:00

object AMPc1 = 41; // center

object OBHn = 86; // north pocket obs hub
object OBHs = 88; // south pocket obs hub
object OBHne = 133; // north east corner obs hub
object OBHsw = 129; // south west corner obs hub

object TURn = 104; // north forked-pass turret
object TURs = 106; // south forked-pass turret
object TURw = 45; // west pocket turret
object TURe = 62; // east pocket turret

object BASEa0 = 36; // north west corner base
object BASEb0 = 75; // south east corner base
object BASEa1 = 44; // AMPa1 natural base
object BASEb1 = 73; // AMPb1 natural base
object BASEa2 = 64; // AMPa2 pocket base
object BASEb2 = 70; // AMPb2 pocket base
object BASEa4 = 105; // AMPa4 base
object BASEb4 = 114; // AMPb4 base
object BASEa6 = 115; // AMPa6 base
object BASEb6 = 103; // AMPb6 base

int tAMPa1 = 0; tAMPa1 = AMPa1->Owner; int tAMPb1 = 0; tAMPb1 = AMPb1->Owner;
int tAMPa2 = 0; tAMPa2 = AMPa2->Owner; int tAMPb2 = 0; tAMPb2 = AMPb2->Owner;
int tAMPa3 = 0; tAMPa3 = AMPa3->Owner; int tAMPb3 = 0; tAMPb3 = AMPb3->Owner;
int tAMPa4 = 0; tAMPa4 = AMPa4->Owner; int tAMPb4 = 0; tAMPb4 = AMPb4->Owner;
int tAMPa5 = 0; tAMPa5 = AMPa5->Owner; int tAMPb5 = 0; tAMPb5 = AMPb5->Owner;
int tAMPa6 = 0; tAMPa6 = AMPa6->Owner; int tAMPb6 = 0; tAMPb6 = AMPb6->Owner;
int tAMPc1 = 0; tAMPc1 = AMPc1->Owner;
int tOBHsw = 0; tOBHsw = OBHsw->Owner; int tOBHne = 0; tOBHne = OBHne->Owner;


// Ally Cooperation Voodoo
//*******************************
player = tAMPc1; uOwnerAllies = player->Allies;
if (uOwnerAllies>>tAMPa3 & 1 > 0) tAMPa3 = tAMPc1;
if (uOwnerAllies>>tAMPb3 & 1 > 0) tAMPb3 = tAMPc1;
if (uOwnerAllies>>tAMPa4 & 1 > 0) tAMPa4 = tAMPc1;
if (uOwnerAllies>>tAMPb4 & 1 > 0) tAMPb4 = tAMPc1;

player = tAMPa4; uOwnerAllies = player->Allies;
if (uOwnerAllies>>tAMPa3 & 1 > 0) tAMPa3 = tAMPa4;
if (uOwnerAllies>>tAMPa5 & 1 > 0) tAMPa5 = tAMPa4;
if (uOwnerAllies>>tAMPb6 & 1 > 0) tAMPb6 = tAMPa4;

player = tAMPb4; uOwnerAllies = player->Allies;
if (uOwnerAllies>>tAMPb3 & 1 > 0) tAMPb3 = tAMPa4;
if (uOwnerAllies>>tAMPb5 & 1 > 0) tAMPb5 = tAMPa4;
if (uOwnerAllies>>tAMPa6 & 1 > 0) tAMPa6 = tAMPa4;

player = tAMPa3; uOwnerAllies = player->Allies;
if (uOwnerAllies>>tAMPa1 & 1 > 0) tAMPa1 = tAMPa3;
if (uOwnerAllies>>tAMPa2 & 1 > 0) tAMPa2 = tAMPa3;

player = tAMPb3; uOwnerAllies = player->Allies;
if (uOwnerAllies>>tAMPb1 & 1 > 0) tAMPb1 = tAMPb3;
if (uOwnerAllies>>tAMPb2 & 1 > 0) tAMPb2 = tAMPb3;

// Randomization
/********************************
Should AI players rush (0-1), turtle (2-4), or boom (5-7) ?

When should AI players push the center?
    [0] = 0 -> 1st attack at 5:12
    [0] = 1 -> 1st attack at 6:22
    [1] = 0 -> 2nd attack proceeds at +2:53 (8:05/9:15)
    [1] = 1 -> 2nd attack offset -1:10 (6:55/8:05)

Should AMP3 push target AMPt4, AMP6, or AMPc1?
    [2,3] = 0-1 -> target AMPc1
    [2,3] = 2 -> target AMP6
    [2,3] = 3 -> target AMPt4

Should AMP4 help push AMPc1 or attack AMPt6?
    [4,5] = 0-2 -> target AMPc1
    [4,5] = 3 -> target AMPt6

Should a player who owns both AMP3 & AMP6 rally at AMP3, AMP6, or both?
    [6,7] = 0-1 -> rally at AMP3
    [6,7] = 2 -> rally at AMP3 and AMP6
    [6,7] = 3 -> rally at AMP6

    Should a player who controls AMP2 get ground or air?
        [8] = 0 -> get ground
        [8] = 1 -> get air
*/
PERFORM GET_ACHRONAL_FIELD 65; 
int af65 = perf_ret;
PERFORM GET_ACHRONAL_FIELD 66; 
int af66 = perf_ret;
PERFORM GET_ACHRONAL_FIELD 67; 
int af67 = perf_ret;
PERFORM GET_ACHRONAL_FIELD 68; 
object whippingBoy = perf_ret;

int r1a50 = 1; // random binary var 1A with 50% probability
int r1b50 = 1; // random binary var 1B with 50% probability
int r2a50 = 1; // random binary var 2A with 50% probability
int r2b50 = 1; // random binary var 2B with 50% probability

// initialize  randomization seeds:
// *******************************
if (1) {
    // initialize achronal seeds:
    // *******************************
    // use arbitrary unit's data to pick a time to pull butterfly seeds
    if (af65==0 && present>1094 && current==2175) {
        object seedling1 = 0;
        seedling1 = QUERY UNIT [unit] MIN [query->HP + query->Timestamp] WHERE [ 
            query.Rank >= $MARINE_RANK && 
            query->Owner < 12 && 
            query->HP > 0 ];
        
        af65 = (seedling1->Position * seedling1->Age)%8100+1;
        target = 65; PERFORM SET_ACHRONAL_FIELD af65; //save randomizer seeder
        
        if (0 || DMDebug>0) {
            int x = 0;
            for(x=0;x<15;x=x+1){
                player = x;
                say " germinating seeds at ", af65/18;
            }
        }
    }

    if (af66==0 && af65>0 && current==af65) {
        PERFORM RAND; 
        af66 = perf_ret;
        target = 66; PERFORM SET_ACHRONAL_FIELD af66;
        
        PERFORM RAND; 
        af67 = perf_ret;
        target = 67; PERFORM SET_ACHRONAL_FIELD af67;
        
        if (0 || DMDebug>0) {
            int x = 0;
            for(x=0;x<15;x=x+1){
                player = x;
                say " af66 seed = ", af66, " af67 seed = ", af67, " rush ", af66[0,3];
            }
        }
    }
    //test value of af67: 9142
    
    // set temporary seeds off achronal seed:
    //*******************************
    if (af66 > 0) {
        PERFORM RAND;
        int temp1 = perf_ret[0,4];
        if (1&(af66>>temp1)) r1a50 = 0;
        
        temp1 = perf_ret[4,4];
        if (1&(af66>>temp1)) r1b50 = 0;
        
        temp1 = perf_ret[8,4];
        if (1&(af66>>temp1)) r2a50 = 0;
        
        temp1 = perf_ret[12,4];
        if (1&(af66>>temp1)) r2b50 = 0;
    }
}

// Achronal Feedback
/********************************
    AMPa4 -> AMPb6
        What was the timestamp of the 1st raid on AMPb6 from AMPa4?
        What was the game-time stamp?
        Who owned APMa4?
        Was it successful at +80s?
        
    AMPa3 -> AMPc1
        What was the timestamp of the 1st attack on AMPc1 from AMPa3?
        What was the game-time stamp?
        Who owned APMa3?
        Was it successful at +120s?
        
    AMP3 + AMPc1 -> AMPt4
        What was the timestamp of the 1st attack on AMPt4 from AMPc1?
        What was the game-time stamp?
        Who owned APMc1?
        Was it successful at +80s?
        
    AMP6 + AMPc1 -> AMP3
        What was the timestamp of the 1st attack on AMP3 from AMPc1?
        What was the game-time stamp?
        Who owned APMc1?
        Was it successful at +80s?
*/

// Debugging checks
//*******************************
if (0 && current%108==0) {
    int x = 0;
    for(x=0;x<15;x=x+1){
        
        PERFORM GET_PLAYER_TIME x;
        if( current==perf_ret && ((enabled>>x)&1) ){
            player = x;
            say "PCF8: ", player->CustomField8;
        }
        
    }
}
if (0 && current%1080==0) {
    int x = 0;
    for(x=0;x<15;x=x+1){
        
        PERFORM GET_PLAYER_TIME x;
        if( current==perf_ret && ((enabled>>x)&1) ){
            player = x;
            say "a1: ", tAMPa1, ",  b1: ", tAMPb1, ",  a2: ", tAMPa2, ",  b2: ", tAMPb2;
            say_to_var "";
            say "a3: ", tAMPa3, ",  b3: ", tAMPb3, ",  a4: ", tAMPa4, ",  b4: ", tAMPb4, ",  c1: ", tAMPc1;
            say_to_var "";
            say "a5: ", tAMPa5, ",  b5: ", tAMPb5, ",  a6: ", tAMPa6, ",  b6: ", tAMPb6;
        }
        
    }
}

// AI Players Move Around the Timeline
//*******************************
if (1 && current == present) {
    //loop through the 14 players
    int x = 0;
	for (x = 0; x<14; x=x+1) {
        player = x;
		if((enabled>>x)&1 && (contenders>>x)&1 && player->IsComputerPlayer){
            if (present == 25 $seconds) { // 0:25
                PERFORM SET_PLAYER_TIME_RATE 3;
            }
            if (present == 60 $seconds) { // 1:00
                PERFORM SET_PLAYER_TIME_RATE 2;
            }
            if (present == 105 $seconds) { // 1:45 - rush (might be a feint)
                PERFORM SET_PLAYER_TIME (105 $seconds); // 1:45
            }
            
            if (present == 160 $seconds) { // 2:40 - invade AMP3/4
                PERFORM SET_PLAYER_TIME (250 $seconds); // 4:10
            }
            if (present == 230 $seconds) { // 3:50 - invade AMP3/4 alt
                PERFORM SET_PLAYER_TIME (320 $seconds); // 5:20
            }
            if (present == 260 $seconds) { // 4:20 - invade AMP2/3 & AMP5
                PERFORM SET_PLAYER_TIME_RATE 1;
                PERFORM SET_PLAYER_TIME (170 $seconds); // 2:50
            }
            if (present == 275 $seconds) {
                PERFORM SET_PLAYER_TIME_RATE 3;
            }
            
            if (present == 320 $seconds) { // 5:20 - sneaky minor attacks
                PERFORM SET_PLAYER_TIME_RATE 1;
                PERFORM SET_PLAYER_TIME (170 $seconds); // 2:50
            }
            if (present == 325 $seconds) {
                PERFORM SET_PLAYER_TIME_RATE 2;
                PERFORM SET_PLAYER_TIME (340 $seconds); // 5:40
            }
            
            if (present == 400 $seconds) { // 6:40 - invasions & attacks
                PERFORM SET_PLAYER_TIME_RATE 1;
                PERFORM SET_PLAYER_TIME (250 $seconds); // 4:10
            }
            if (present == 445 $seconds) {
                PERFORM SET_PLAYER_TIME_RATE 3;
            }
            if (present == 490 $seconds) { // 8:10 - rnd 2/3 invasions & attacks
                PERFORM SET_PLAYER_TIME_RATE 1;
                PERFORM SET_PLAYER_TIME (340 $seconds); // 5:40
            }
            if (present == 555 $seconds) {
                PERFORM SET_PLAYER_TIME_RATE 3;
            }
		}
	}
}


// Fortification & Base Building
/********************************
    AMPs periodically spawn building for free when conditions are met 
    and the target location is not obstructed

    AMP1 + AMP2 -> fortify the forked pass, 
    build base at main + pocket + fortify natural:
        RP @ 30,60 main
        RP @ 80,20 pocket
        RP @ 20,90 natural
        RP @ 30,30 main
        ***
        reaph @ 78,80 natural
    AMP1 + AMP3 -> fortify the hill + RP forward QP:
        reaph @ 78,101
        RP @ 80,75
        ***
    AMP4 + AMP3 -> fortify the hill + build base at natural:
        reaph @ 64,117
        turret @ 82,114
        ***
    AMP4 + AMP5 -> fortify AMP4 + RP the spoils:
        reaph @ 50,150
        turret @ 70,150
        RP @ 30,150
        reaph @ 24,146 (late)
        ***
    AMP4 + AMPt6 -> fortify and build base at AMPt6:
        turret @ 80,180
        reaph @ 65,180
        RP x2 @ 60,190
        turret @ 51,187
        fac @ 75,205
        reaph @ 85,195
*/
// Fortifications:
PERFORM RAND; // 50% chance to execute any given order - makes buildup look more organic
int a = 0;
int b = 4;
int f = 4;
if (1 && current < 1.5*present) { 
    _minT = 145 $seconds; _maxT = 1000 $seconds;
    _everyT = 121 $seconds;
    
    // fortify AMP1 and its basin
    if (tAMPa1<14 && r1a50){
        _underling = AMPa1; _uOwner = _underling->Owner; 
        _dest[$Xpos] = 20; _dest[$Ypos] = 90; // crate line baack
        _minT = 115 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 33; _dest[$Ypos] = 115; // AMP1 front
        _minT = 155 $seconds; $MAKA_TURRET
        
        if (tAMPa1!=tAMPc1) {
            _dest[$Xpos] = 63; _dest[$Ypos] = 102;
            _minT = 375 $seconds; $MAKA_TURRET
            
            _dest[$Xpos] = 40; _dest[$Ypos] = 100;
            _minT = 415 $seconds; $MAKA_REAPH
        }
        
        if (tAMPa1==tAMPa4) {
            _dest[$Xpos] = 65; _dest[$Ypos] = 116;
            _minT = 418 $seconds; $MAKA_REAPH
        }
    }
    if (tAMPb1<14 && r1b50){
        _underling = AMPb1; _uOwner = _underling->Owner;
        _dest[$Xpos] = 196; _dest[$Ypos] = 147; 
        _minT = 115 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 183; _dest[$Ypos] = 122;
        _minT = 155 $seconds; $MAKA_TURRET
        
        if (tAMPb1!=tAMPc1) {
            _dest[$Xpos] = 154; _dest[$Ypos] = 137;
            _minT = 375 $seconds; $MAKA_TURRET
            
            _dest[$Xpos] = 175; _dest[$Ypos] = 142;
            _minT = 415 $seconds; $MAKA_REAPH
        }
        
        if (tAMPb1==tAMPb4) {
            _dest[$Xpos] = 152; _dest[$Ypos] = 121;
            _minT = 418 $seconds; $MAKA_REAPH
        }
    }
    
    // fortify AMP2 and its hill
    if (tAMPa2<14 && r1a50){
        _underling = AMPa2; _uOwner = _underling->Owner;
        _dest[$Xpos] = 82; _dest[$Ypos] = 18;  // AMP2
        _minT = 280 $seconds; $MAKA_TURRET
        
        if (tAMPa3==tAMPa2) {
            _dest[$Xpos] = 84; _dest[$Ypos] = 36; // front door
            _minT = 360 $seconds; $MAKA_REAPH
        }
        
        _dest[$Xpos] = 100; _dest[$Ypos] = 33;  // corner
        _minT = 400 $seconds; $MAKA_TURRET
    }
    if (tAMPb2<14 && r1b50){
        _underling = AMPb2; _uOwner = _underling->Owner;
        _dest[$Xpos] = 135; _dest[$Ypos] = 219;  
        _minT = 280 $seconds; $MAKA_TURRET
        
        if (tAMPa3==tAMPa2) {
            _dest[$Xpos] = 134; _dest[$Ypos] = 202;
            _minT = 360 $seconds; $MAKA_REAPH
        }
        
        _dest[$Xpos] = 118; _dest[$Ypos] = 204;  
        _minT = 400 $seconds; $MAKA_TURRET
    }
    
    // fortify the forked pass
    if (tAMPa2==tAMPa1 && r1a50){
        _underling = AMPa1; _uOwner = _underling->Owner;
        _dest[$Xpos] = 78; _dest[$Ypos] = 80;
        _minT = 145 $seconds; $MAKA_REAPH
        
        if (TURn->Owner!=tAMPa1) {
            _dest[$Xpos] = 77; _dest[$Ypos] = 67;  
            _minT = 330 $seconds; $MAKA_TURRET
        }
    }
    if (tAMPb2==tAMPb1 && r1b50){
        _underling = AMPb1; _uOwner = _underling->Owner;
        _dest[$Xpos] = 142; _dest[$Ypos] = 158;
        _minT = 145 $seconds; $MAKA_REAPH
        
        if (TURs->Owner!=tAMPb1) {
            _dest[$Xpos] = 140; _dest[$Ypos] = 170;  
            _minT = 330 $seconds; $MAKA_TURRET
        }
    }
    
    // fortify the central hill:
    if (tAMPc1==tAMPa4 && AMPa4->HP >= 80 && r1a50){
        _underling = AMPa4; _uOwner = _underling->Owner;
        
        _dest[$Xpos] = 63; _dest[$Ypos] = 102; // outside
        if (tAMPa1==tAMPc1 && tAMPa2==tAMPc1 && AMPc1->HP >= 80) {
            _dest[$Xpos] = 80; _dest[$Ypos] = 114; // center-side
        }
        _minT = 170 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 64; _dest[$Ypos] = 117;
        _minT = 260 $seconds; $MAKA_REAPH
        
        if (tAMPa3==tAMPc1) {
            _dest[$Xpos] = 78; _dest[$Ypos] = 101;
            _minT = 235 $seconds; $MAKA_REAPH
        }
    }
    if (tAMPc1==tAMPb4 && AMPb4->HP >= 80 && r1b50){
        _underling = AMPb4; _uOwner = _underling->Owner;
        
        _dest[$Xpos] = 154; _dest[$Ypos] = 137;
        if (tAMPb1==tAMPc1 && tAMPb2==tAMPc1 && AMPc1->HP >= 80) {
            _dest[$Xpos] = 137; _dest[$Ypos] = 123;
        }
        _minT = 170 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 154; _dest[$Ypos] = 121;
        _minT = 260 $seconds; $MAKA_REAPH
        
        if (tAMPb3==tAMPc1) {
            _dest[$Xpos] = 140; _dest[$Ypos] = 137;
            _minT = 235 $seconds; $MAKA_REAPH
        }
    }

    // fortify the AMP4/5 basin:
    if (tAMPa5==tAMPa4 && r1a50){
        _underling = AMPa4; _uOwner = _underling->Owner;
        _dest[$Xpos] = 32; _dest[$Ypos] = 140;
        _minT = 145 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 67; _dest[$Ypos] = 140;
        _minT = 245 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 50; _dest[$Ypos] = 150;
        _minT = 280 $seconds; $MAKA_REAPH
        
        if (tAMPa1!=tAMPa4 || BASEa4->Owner==AMPa4->Owner) {
            _dest[$Xpos] = 52; _dest[$Ypos] = 130;
            _minT = 250 $seconds; $MAKA_TURRET
        }
    }
    if (tAMPb5==tAMPb4 && r1b50){
        _underling = AMPb4; _uOwner = _underling->Owner;
        _dest[$Xpos] = 186; _dest[$Ypos] = 98;
        _minT = 145 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 151; _dest[$Ypos] = 98;
        _minT = 245 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 168; _dest[$Ypos] = 88;
        _minT = 280 $seconds; $MAKA_REAPH
        
        if (tAMPb1!=tAMPb4 || BASEb4->Owner==AMPb4->Owner) {
            _dest[$Xpos] = 165; _dest[$Ypos] = 107;
            _minT = 250 $seconds; $MAKA_TURRET
        }
    }

    // fortify the AMP6 basin:
    if (tAMPa6==tAMPb4 || BASEa6->Owner==AMPa6->Owner && r1a50){
        _underling = AMPa6; _uOwner = _underling->Owner;
        _dest[$Xpos] = 150; _dest[$Ypos] = 55; // pocket
        _minT = 175 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 139; _dest[$Ypos] = 58; // front doors
        _minT = 190 $seconds; $MAKA_TURRET
    }
    if (tAMPb6==tAMPa4 || BASEb6->Owner==AMPb6->Owner && r1b50){
        _underling = AMPb6; _uOwner = _underling->Owner;
        _dest[$Xpos] = 68; _dest[$Ypos] = 183;
        _minT = 175 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 78; _dest[$Ypos] = 179;  
        _minT = 190 $seconds; $MAKA_TURRET
    }
}
// Base Building:
PERFORM RAND; 
if (1 && current < 1.5*present) {
    _minT = 145 $seconds; _maxT = 1000 $seconds;
    _everyT = 121 $seconds;
    
    // BASE0: 2 reaphs, 3 domes on high ground
    if (BASEa0->Owner==AMPa2->Owner && r2a50){
        _underling = AMPa2; _uOwner = _underling->Owner;
        _dest[$Xpos] = 42; _dest[$Ypos] = 28; // Back door
        _minT = 320 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 29; _dest[$Ypos] = 35;
        _minT = 325 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 45; _dest[$Ypos] = 47; // Front door
        _minT = 350 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 21; _dest[$Ypos] = 50;
        _minT = 400 $seconds; $MAKA_REAPH
    }
    if (BASEb0->Owner==AMPb2->Owner && r2b50){
        _underling = AMPb2; _uOwner = _underling->Owner;
        _dest[$Xpos] = 176; _dest[$Ypos] = 208;
        _minT = 320 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 189; _dest[$Ypos] = 203;
        _minT = 325 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 172; _dest[$Ypos] = 190;
        _minT = 350 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 197; _dest[$Ypos] = 188;
        _minT = 400 $seconds; $MAKA_REAPH
    }
    
    // AMP1 + AMP2: 2 Arcticii, 1 Spyre, 4 Mounds on BASE0 HG and BASE1 + Fork LG
    if (tAMPa2==tAMPa1 && r2a50){
        _underling = AMPa2; _uOwner = _underling->Owner;
        _dest[$Xpos] = 26; _dest[$Ypos] = 85; // BASE1 back pocket
        _minT = 130 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 70; _dest[$Ypos] = 23; // BASE2 AMP
        _minT = 140 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 31; _dest[$Ypos] = 66; // BASE0 highground front
        _minT = 160 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 15; _dest[$Ypos] = 54; // BASE0 highground pocket
        _minT = 170 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 47; _dest[$Ypos] = 63; // BASE0 highground
        _minT = 190 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 33; _dest[$Ypos] = 59; // B0 crates
        _minT = 210 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 61; _dest[$Ypos] = 72; // fork pocket
        _minT = 250 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 57; _dest[$Ypos] = 79; // fork low ground
        _minT = 355 $seconds; $MAKA_SPYRE
    }
    if (tAMPb2==tAMPb1 && r2b50){
        _underling = AMPb2; _uOwner = _underling->Owner;
        _dest[$Xpos] = 191; _dest[$Ypos] = 152;
        _minT = 130 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 147; _dest[$Ypos] = 214;
        _minT = 140 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 185; _dest[$Ypos] = 171;
        _minT = 160 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 201; _dest[$Ypos] = 183;
        _minT = 170 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 171; _dest[$Ypos] = 176;
        _minT = 190 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 184; _dest[$Ypos] = 178;
        _minT = 210 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 157; _dest[$Ypos] = 167;
        _minT = 250 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 160; _dest[$Ypos] = 158;
        _minT = 355 $seconds; $MAKA_SPYRE
    }
    // Tech rush
    if (current < 180 $seconds) {
        if (tAMPa1<14 && r2a50){
            _underling = AMPa1; _uOwner = _underling->Owner;
            _dest[$Xpos] = 26; _dest[$Ypos] = 85; // BASE1 back pocket
            _minT = 90 $seconds; $MAKA_MOUND
        }
        if (tAMPa2<14 && r2a50){
            _underling = AMPa2; _uOwner = _underling->Owner;
            _dest[$Xpos] = 70; _dest[$Ypos] = 23; // BASE2 AMP
            _minT = 100 $seconds; $MAKA_MOUND
        }
        
        if (tAMPb1<14 && r2b50){
            _underling = AMPb1; _uOwner = _underling->Owner;
            _dest[$Xpos] = 191; _dest[$Ypos] = 152;
            _minT = 90 $seconds; $MAKA_MOUND
        }
        if (tAMPb2<14 && r2b50){
            _underling = AMPb1; _uOwner = _underling->Owner;
            _dest[$Xpos] = 147; _dest[$Ypos] = 214;
            _minT = 100 $seconds; $MAKA_MOUND
        }
    }
    
    // AMP4 + AMP6:
    if (tAMPa6==tAMPb4 && AMPb4->HP>=80 && r2a50){
        _underling = AMPa6; _uOwner = _underling->Owner;
        _dest[$Xpos] = 159; _dest[$Ypos] = 85; //BASE4 side
        _minT = 135 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 165; _dest[$Ypos] = 26; //BASE6 back
        _minT = 145 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 153; _dest[$Ypos] = 61; //BASE6 front
        _minT = 185 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 134; _dest[$Ypos] = 35; //AMP6 front
        _minT = 235 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 138; _dest[$Ypos] = 48; // BASE6 front
        _minT = 280 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 150; _dest[$Ypos] = 32;
        _minT = 370 $seconds; $MAKA_SPYRE
    }
    if (tAMPb6==tAMPa4 && AMPa4->HP>=80 && r2b50){
        _underling = AMPb6; _uOwner = _underling->Owner;
        _dest[$Xpos] = 58; _dest[$Ypos] = 152;
        _minT = 135 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 52; _dest[$Ypos] = 211; 
        _minT = 145 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 64; _dest[$Ypos] = 176; 
        _minT = 185 $seconds; $MAKA_MOUND
        
        _dest[$Xpos] = 83; _dest[$Ypos] = 202; 
        _minT = 235 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 79; _dest[$Ypos] = 189; 
        _minT = 280 $seconds; $MAKA_ARCT
        
        _dest[$Xpos] = 67; _dest[$Ypos] = 205;
        _minT = 370 $seconds; $MAKA_SPYRE
    }
    // Tech rush
    if (current < 180 $seconds) {
        if (tAMPa4<14 && r2a50){
            _underling = AMPa4; _uOwner = _underling->Owner;
            _dest[$Xpos] = 58; _dest[$Ypos] = 152;
            _minT = 95 $seconds; $MAKA_MOUND
        }
        if (tAMPa6<14 && r2a50){
            _underling = AMPa6; _uOwner = _underling->Owner;
            _dest[$Xpos] = 165; _dest[$Ypos] = 26; //BASE6 back
            _minT = 105 $seconds; $MAKA_MOUND
        }
        
        if (tAMPb4<14 && r2b50){
            _underling = AMPb4; _uOwner = _underling->Owner;
            _dest[$Xpos] = 159; _dest[$Ypos] = 85; //BASE4 side
            _minT = 95 $seconds; $MAKA_MOUND
        }
        if (tAMPb6<14 && r2b50){
            _underling = AMPb6; _uOwner = _underling->Owner;
            _dest[$Xpos] = 52; _dest[$Ypos] = 211; 
            _minT = 105 $seconds; $MAKA_MOUND
        }
    }
    
    // BASE6:
    if (BASEa6->Owner==AMPa6->Owner && r2a50) {
        _underling = AMPa6; _uOwner = _underling->Owner;
        _dest[$Xpos] = 160; _dest[$Ypos] = 35;
        _minT = 290 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 132; _dest[$Ypos] = 45;  
        _minT = 300 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 165; _dest[$Ypos] = 50;  
        _minT = 330 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 145; _dest[$Ypos] = 27;  
        _minT = 400 $seconds; $MAKA_TURRET
    }
    if (BASEb6->Owner==AMPb6->Owner && r2b50) {
        _underling = AMPb6; _uOwner = _underling->Owner;
        _dest[$Xpos] = 60; _dest[$Ypos] = 202;
        _minT = 290 $seconds; $MAKA_REAPH
        
        _dest[$Xpos] = 85; _dest[$Ypos] = 192;  
        _minT = 300 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 51; _dest[$Ypos] = 187;  
        _minT = 330 $seconds; $MAKA_TURRET
        
        _dest[$Xpos] = 73; _dest[$Ypos] = 209;  
        _minT = 400 $seconds; $MAKA_TURRET
    }
}


// Early game AMP grab
/*******************************
1. secure derelict turrets at AMP3 and AMP5
2. contest AMPc1
3. grab AMP1, AMP2, & AMP4
4. grab AMP6
5. grab the SW and NE corners
*/
if (1) {
    _uOwner = -1;
    _minT = 40 $seconds ; _maxT = 160 $seconds;
    _everyT = 25 $seconds; _recruit = 1;
    
    //1. secure derelict turrets at AMP3 and AMP5
    // AMPa3, AMPb3
    _minX = 0; _maxX = 170;
    _minY = 0; _maxY = 120;
    _dest[$Xpos] = 110; _dest[$Ypos] = 80;
    $DEPLOY_MINIONS 

    _minX = 50; _maxX = 220;
    _minY = 120; _maxY = 240;
    _dest[$Xpos] = 110; _dest[$Ypos] = 160;
    $DEPLOY_MINIONS
    
    // AMPa5, AMPb5
    _minX = 0; _maxX = 170;
    _minY = 0; _maxY = 240;
    _dest[$Xpos] = 25; _dest[$Ypos] = 150;
    $DEPLOY_MINIONS 

    _minX = 50; _maxX = 220;
    _minY = 0; _maxY = 240;
    _dest[$Xpos] = 195; _dest[$Ypos] = 90;
    $DEPLOY_MINIONS
    
    
    //2. contest AMPc1 
    _minT = 45 $seconds ; _maxT = 95 $seconds;
    _everyT = 40 $seconds; _recruit = 3;
    _minX = 0; _maxX = 500;
    _minY = 0; _maxY = 500;
    _dest[$Xpos] = 110; _dest[$Ypos] = 120;
    $DEPLOY_MINIONS
    
    
    //3. grab AMP1, AMP2, & AMP4
    _minT = 50 $seconds ; _maxT = 170 $seconds;
    _everyT = 40 $seconds; _recruit = 1;
    
    // grab AMPa1, AMPb1
    _minX = 0; _maxX = 60;
    _minY = 0; _maxY = 160;
    _dest[$Xpos] = 30; _dest[$Ypos] = 110;
    $DEPLOY_MINIONS

    _minX = 160; _maxX = 220;
    _minY = 80; _maxY = 240;
    _dest[$Xpos] = 190; _dest[$Ypos] = 130;
    $DEPLOY_MINIONS

    // grab AMPa2, AMPb2
    _minX = 0; _maxX = 140;
    _minY = 0; _maxY = 100;
    _dest[$Xpos] = 75; _dest[$Ypos] = 25;
    $DEPLOY_MINIONS 

    _minX = 180; _maxX = 220;
    _minY = 140; _maxY = 240;
    _dest[$Xpos] = 145; _dest[$Ypos] = 215;
    $DEPLOY_MINIONS 

    // grab AMPa4, AMPb4
    _minX = 0; _maxX = 125;
    _minY = 80; _maxY = 190;
    _dest[$Xpos] = 70; _dest[$Ypos] = 140;
    $DEPLOY_MINIONS

    _minX = 95; _maxX = 220;
    _minY = 50; _maxY = 160;
    _dest[$Xpos] = 150; _dest[$Ypos] = 100;
    $DEPLOY_MINIONS 


    //4. grab AMP6
    _minT = 55 $seconds ; _maxT = 175 $seconds;
    _minX = 100; _maxX = 180;
    _minY = 0; _maxY = 110;
    _dest[$Xpos] = 130; _dest[$Ypos] = 30;
    $DEPLOY_MINIONS

    _minX = 40; _maxX = 120;
    _minY = 130; _maxY = 240;
    _dest[$Xpos] = 90; _dest[$Ypos] = 210;
    $DEPLOY_MINIONS 


    //5. grab the SW and NE corners
    _minT = 150 $seconds ; _maxT = 150 $seconds;
    _minX = 0; _maxX = 80;
    _minY = 80; _maxY = 160;
    _dest[$Xpos] = 20; _dest[$Ypos] = 155;
    $DEPLOY_MINIONS 

    _minX = 140; _maxX = 220;
    _minY = 80; _maxY = 160;
    _dest[$Xpos] = 200; _dest[$Ypos] = 85;
    $DEPLOY_MINIONS 

    _minX = 40; _maxX = 220;
    _minY = 170; _maxY = 240;
    _dest[$Xpos] = 40; _dest[$Ypos] = 210;
    $DEPLOY_MINIONS 

    _minX = 0; _maxX = 180;
    _minY = 0; _maxY = 70;
    _dest[$Xpos] = 180; _dest[$Ypos] = 30;
    $DEPLOY_MINIONS 
}


// Coup-de-grace attack
/*******************************
1. Pick a random achron, portal, or progenitor to become the global whipping boy
2. Send everyone, starting with the furthest away, A-moving to its position
*/
if (1 && af66[0,3]<5) {
    // 1. Pick global whipping boy
    if (present==105 $seconds && current == present){
        whippingBoy = QUERY UNIT [unit] 
                MIN [8*((query->Owner)->IsComputerPlayer) + 
                (query + af66)&15] 
                WHERE [ 
                (query->Owner)<14 &&
                (query.Rank == $ACHRON_RANK ||
                query.Rank == $RACE_CHOOSER_RANK ||
                query.Rank == $GREKIM_PROGENERATION_RANK)
            ];
        target = 68; PERFORM SET_ACHRONAL_FIELD whippingBoy;
    }
        
    // 2. A-move to its position
    if (present >105 $seconds && current%72 == 3 &&
            current >= 105 $seconds && current < 165 $seconds
            ) {
        object underling1 = 0;
        underling1 = QUERY UNIT [unit] MAX [query<_>whippingBoy] WHERE [ 
                query.Rank >= $MARINE_RANK && 
                (query->Owner)->IsComputerPlayer
            ];
        
        if (underling1!=0) {
            _dest = whippingBoy->Position;
            _dest[$Zpos] = 0;
            target = underling1;
            _obj = $OBJECTIVE_ATTACKPOS_DISPATCH;
            $DISPATCH_OBJECTIVE
        }
    }
}

//*******************************
// Mid to late game strategy
//*******************************
if (current < 160 $seconds) PERFORM NOTHING;
_minT = 160 $seconds ; _maxT = 1800 $seconds ;


// Drawing battle lines
/********************************
    if you own AMP3 -> rally at AMP3
    if you own AMP4 -> rally at AMP4
    if you own AMPc1 -> rally at AMPc1
    if you own AMP1 but not AMP2 -> rally at (60,110)
    if you own AMP1 but not AMP4 -> rally at (60,110)
*/
if (1) {
    _everyT = 45 $seconds; _recruit = 2;
    _uOwner = -1;
    _minX = 0; _maxX = 220;
    _minY = 0; _maxY = 240;

    // if you own AMP3 -> rally at AMP3 (110,80)
    if (BASEa2->Owner==AMPa3->Owner) _recruit = 3;
    if (AMPa3->HP >= 70) {
        _uOwner = tAMPa3;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 120;
        _dest[$Xpos] = 110; _dest[$Ypos] = 80;
        $DEPLOY_MINIONS
    }
    _recruit = 2;
    if (BASEb2->Owner==AMPb3->Owner) _recruit = 3;
    if (AMPb3->HP >= 70) {
        _uOwner = tAMPb3;
        _minX = 0; _maxX = 220;
        _minY = 120; _maxY = 240;
        _dest[$Xpos] = 110; _dest[$Ypos] = 160;
        $DEPLOY_MINIONS
    }
    _recruit = 2;

    // if you own AMP4 -> rally at AMP4 (60,140)
    if (AMPa4->HP >= 70) {
        _uOwner = tAMPa4;
        _minX = 0; _maxX = 90;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 60; _dest[$Ypos] = 140;
        $DEPLOY_MINIONS
    }
    if (AMPb4->HP >= 70) {
        _uOwner = tAMPb4;
        _minX = 130; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 160; _dest[$Ypos] = 100;
        $DEPLOY_MINIONS
    }
    
    _minT = 165 $seconds;
    // if you own AMPc1 -> rally at AMPc1
    if (AMPc1->HP >= 60) {
        _uOwner = tAMPc1;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 110; _dest[$Ypos] = 120;
        $DEPLOY_MINIONS
    }

    // if you have AMP1 but not AMP2 -> rally at (60,110)
    if (tAMPa2!=tAMPa1 && AMPa1->HP >= 70) {
        _uOwner = tAMPa1;
        _minX = 0; _maxX = 90;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 60; _dest[$Ypos] = 110;
        $DEPLOY_MINIONS
    }
    if (tAMPb2!=tAMPb1 && AMPb1->HP >= 70) {
        _uOwner = tAMPb1;
        _minX = 130; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 160; _dest[$Ypos] = 130;
        $DEPLOY_MINIONS
    }

    // if you have AMP1 but not AMP4 -> rally at (60,110)
    if (tAMPa4!=tAMPa1 && AMPa1->HP >= 70) {
        _uOwner = tAMPa1;
        _minX = 0; _maxX = 90;
        _minY = 0; _maxY = 120;
        _dest[$Xpos] = 60; _dest[$Ypos] = 110;
        $DEPLOY_MINIONS
    }
    if (tAMPb4!=tAMPb1 && AMPb1->HP >= 70) {
        _uOwner = tAMPb1;
        _minX = 130; _maxX = 220;
        _minY = 120; _maxY = 240;
        _dest[$Xpos] = 160; _dest[$Ypos] = 130;
        $DEPLOY_MINIONS
    }
}


// Reclaiming rightful territory
/********************************
   AMP4 <-> AMPt6
   AMP1 <-> AMP4
   AMP1 -> AMP2 + AMP3
   AMP2 + AMP3 -> AMP1
   AMP5 / AMP6 -> OBH
   */
if (1) {
    _maxM = $SmlAtkMT ;
    _minT = 170 $seconds;
    _everyT = 85 $seconds; _recruit = 4;
    _uOwner = -1;
    _minX = 0; _maxX = 220;
    _minY = 0; _maxY = 240;
    
    // AMP4 <-> AMPt6 : 
    // if you own AMP4 but not AMPt6 -> attack AMPt6
    // or if you own AMP6 but not AMPt4 -> attack AMPt4
    int contestSW = (AMPa4->HP >= 90 && AMPb6->HP >= 90) || tAMPa4==14 || tAMPb6==14;
    int contestNE = (AMPb4->HP >= 90 && AMPa6->HP >= 90) || tAMPb4==14 || tAMPa6==14;
    if (tAMPa4!=tAMPb6 && contestSW) {
        _uOwner = tAMPa4;
        _dest[$Xpos] = 90; _dest[$Ypos] = 210;
        $DEPLOY_MINIONS
        
        _uOwner = tAMPb6;
        _dest[$Xpos] = 60; _dest[$Ypos] = 140;
        $DEPLOY_MINIONS
    }
    if (tAMPb4!=tAMPa6 && contestNE) {
        _uOwner = tAMPb4;
        _dest[$Xpos] = 130; _dest[$Ypos] = 30;
        $DEPLOY_MINIONS
        
        _uOwner = tAMPa6;
        _dest[$Xpos] = 160; _dest[$Ypos] = 100;
        $DEPLOY_MINIONS
    }

    _minT = 175 $seconds;
    // AMP1 <-> AMP4 : 
    // if you have a squad at (60,110) but don't own AMP4 -> attack AMP4
    // or if you own AMP4 but not AMP1 -> attack AMP1
    if (tAMPa4!=tAMPa1) {
        _uOwner = tAMPa1;
        _minX = 0; _maxX = 80;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 60; _dest[$Ypos] = 140;
        $DEPLOY_MINIONS
        
        if (AMPa4->HP >= 90){
            _uOwner = tAMPa4;
            _dest[$Xpos] = 30; _dest[$Ypos] = 110;
            $DEPLOY_MINIONS
        }
    }
    if (tAMPb4!=tAMPb1) {
        _uOwner = tAMPb1;
        _minX = 140; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 160; _dest[$Ypos] = 100;
        $DEPLOY_MINIONS
        
        if (AMPb4->HP >= 90){
            _uOwner = tAMPb4;
            _dest[$Xpos] = 190; _dest[$Ypos] = 130;
            $DEPLOY_MINIONS
        }
    }

    _minT = 180 $seconds;
    // AMP1 -> AMP2 + AMP3 : 
    // if you have a squad at (60,110) but don't own AMP2 -> attack AMP2 & AMP3
    if (tAMPa2!=tAMPa1) {
        _uOwner = tAMPa1;
        _minX = 0; _maxX = 80;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 75; _dest[$Ypos] = 25;
        $DEPLOY_MINIONS
        _dest[$Xpos] = 110; _dest[$Ypos] = 80;
        $DEPLOY_MINIONS
    }
    if (tAMPb2!=tAMPb1) {
        _uOwner = tAMPb1;
        _minX = 140; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 145; _dest[$Ypos] = 215;
        $DEPLOY_MINIONS
        _dest[$Xpos] = 110; _dest[$Ypos] = 160;
        $DEPLOY_MINIONS
    }

    // AMP2 + AMP3 -> AMP1 :
    // if you own AMP2 + AMP3 but don't own AMP1 -> attack AMP1
    if (tAMPa3==tAMPa2 && tAMPa1!=tAMPa2) {
        _uOwner = tAMPa2;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 115;
        _dest[$Xpos] = 30; _dest[$Ypos] = 110;
        $DEPLOY_MINIONS
    }
    if (tAMPb3==tAMPb2 && tAMPb1!=tAMPb2) {
        _uOwner = tAMPb2;
        _minX = 0; _maxX = 220;
        _minY = 125; _maxY = 240;
        _dest[$Xpos] = 190; _dest[$Ypos] = 130;
        $DEPLOY_MINIONS
    }

    _everyT = 110 $seconds;
    _minT = 185 $seconds;
    _minX = 0; _maxX = 220;
    _minY = 0; _maxY = 240;
    
    // AMP5 / AMP6 -> OBH :
    // if you have AMP5 or AMP6 but not the corner OBH -> grab the OBH
    _recruit = 2;
    if (tAMPa5!=tOBHsw) {
        _uOwner = tAMPa5;
        _dest[$Xpos] = 20; _dest[$Ypos] = 190;
        $DEPLOY_MINIONS
    }
    if (tAMPb5!=tOBHne) {
        _uOwner = tAMPb5;
        _dest[$Xpos] = 200; _dest[$Ypos] = 50;
        $DEPLOY_MINIONS
    }
    if (tAMPa6!=tOBHne && tAMPa6!=tAMPb5) {
        _uOwner = tAMPa6;
        _dest[$Xpos] = 200; _dest[$Ypos] = 50;
        $DEPLOY_MINIONS
    }
    if (tAMPb6!=tOBHsw && tAMPb6!=tAMPa5) {
        _uOwner = tAMPb6;
        _dest[$Xpos] = 20; _dest[$Ypos] = 190;
        $DEPLOY_MINIONS
    }

    _maxM = (2*present) <| (720 $seconds); 
}


// Major attack vectors
/********************************
    Invading no man's land:
    * AMP3 + AMP4 -> AMPc1
    Invading hostile territory
    * AMPc1 + AMP3 -> AMPt4
    * AMPc1 + AMPt6 -> AMPt3
    Invading fortified territory
    * AMP2 <-> AMP3
    * AMP4 -> AMP5
*/
if (1) {
    _maxM = $BigAtkMT ;
    _minT = 312 $seconds ; _maxT = 1800 $seconds ;
    _everyT = 173 $seconds; _recruit = 8;
    _uOwner = -1;
    _minX = 0; _maxX = 220;
    _minY = 0; _maxY = 240;

    // Invading no man's land:
    //---------------------------------
    // AMP3 + AMP4 -> AMPc1 :
    // if you own AMP3 + AMP4 -> attack AMPc1 from AMP3 (and AMP4 sometimes)
    if (tAMPa4==tAMPa3 && tAMPc1!=tAMPa3) {
        _uOwner = tAMPa3;
        if (af66[0]) {
            _minT = 382 $seconds ; // randomized timing
            //player = 0; say " A side delaying push";
        }
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 125;
        _dest[$Xpos] = 110; _dest[$Ypos] = 120;
        $DEPLOY_MINIONS
        
        _minT = _minT + 4 $seconds ;
        _minX = 0; _maxX = 115;
        _minY = 115; _maxY = 240;
        if (af66[4,2]==3) {
            _dest[$Xpos] = 90; _dest[$Ypos] = 210; // randomized AMP4 target
            //player = 0; say " AMPa4 targeting AMPb6";
        }
        $DEPLOY_MINIONS
    }   
    if (tAMPb3==tAMPb4 && tAMPc1!=tAMPb3) {
        _minT = 320 $seconds ;
        if (af67[0]) {
            _minT = 390 $seconds ; // randomized timing
            //player = 0; say " B side delaying push";
        }
        _uOwner = tAMPb3;
        _minX = 0; _maxX = 220;
        _minY = 115; _maxY = 240;
        _dest[$Xpos] = 110; _dest[$Ypos] = 120;
        $DEPLOY_MINIONS
        
        _minT = _minT + 4 $seconds ;
        _minX = 105; _maxX = 220;
        _minY = 0; _maxY = 125;
        if (af67[4,2]==3) {
            _dest[$Xpos] = 130; _dest[$Ypos] = 30; // randomized AMP4 target
            //player = 0; say " AMPb4 targeting AMPa6";
        }
        $DEPLOY_MINIONS
    }    

    // Invading hostile territory:
    //---------------------------------
    _minT = 326 $seconds ;
    if (af66[1]) {
        _minT = 256 $seconds ; // randomized timing
        //player = 0; say " Center rushing push";
    }
    _uOwner = tAMPc1;
    _maxM = 1080 ;
    
    // AMPc1 + AMP3 -> AMPt4 :
    // if you own AMPc1 + AMP3 -> attack AMPt4
    if (tAMPa3==tAMPc1 && tAMPb4!=tAMPc1) {
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 115;
        _dest[$Xpos] = 160; _dest[$Ypos] = 100;
        $DEPLOY_MINIONS
    }
    if (tAMPb3==tAMPc1 && tAMPa4!=tAMPc1) {
        _minX = 0; _maxX = 220;
        _minY = 125; _maxY = 240;
        _dest[$Xpos] = 60; _dest[$Ypos] = 140;
        $DEPLOY_MINIONS
    }
    
    // AMPc1 + AMP4 -> AMP3 :
    // if you own AMPc1 + AMP4 -> attack AMP3
    if (tAMPa4==tAMPc1 && tAMPa3!=tAMPc1) {
        _minX = 0; _maxX = 220;
        _minY = 90; _maxY = 240;
        _dest[$Xpos] = 110; _dest[$Ypos] = 80;
        $DEPLOY_MINIONS
    }
    if (tAMPb4==tAMPc1 && tAMPb3!=tAMPc1) {
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 150;
        _dest[$Xpos] = 110; _dest[$Ypos] = 160;
        $DEPLOY_MINIONS
    }
    
    _maxM = $BigAtkMT ;
    _minT = 352 $seconds ;
    // AMPc1 + AMPt6 -> AMPt3 :
    // if you own AMPc1 + AMPt6 -> attack AMPt3
    if (tAMPb6==tAMPc1 && tAMPb3!=tAMPc1) {
        _minX = 0; _maxX = 115;
        _minY = 90; _maxY = 240;
        _dest[$Xpos] = 110; _dest[$Ypos] = 160;
        $DEPLOY_MINIONS
    }
    if (tAMPb6==tAMPc1 && tAMPa3!=tAMPc1) {
        _minX = 105; _maxX = 220;
        _minY = 0; _maxY = 150;
        _dest[$Xpos] = 110; _dest[$Ypos] = 80;
        $DEPLOY_MINIONS
    }
    
    // Invading enemy fortified territory:
    //---------------------------------
    // AMP2 <-> AMP3 : 
    // if you own AMP2 but not AMP3 -> attack AMP3
    // or if you own AMP3 but not AMP2 -> attack AMP2
    _minT = 170 $seconds ;
    if (tAMPa3!=tAMPa2) {
        _uOwner = tAMPa2;
        _dest[$Xpos] = 110; _dest[$Ypos] = 80;
        $DEPLOY_MINIONS
        
        if (AMPa3->HP >= 90){
            _uOwner = tAMPa3;
            _dest[$Xpos] = 75; _dest[$Ypos] = 25;
            $DEPLOY_MINIONS
        }
    }
    if (tAMPb3!=tAMPb2) {
        _uOwner = tAMPb2;
        _dest[$Xpos] = 110; _dest[$Ypos] = 160;
        $DEPLOY_MINIONS
        
        if (AMPb3->HP >= 90){
            _uOwner = tAMPb3;
            _dest[$Xpos] = 145; _dest[$Ypos] = 215;
            $DEPLOY_MINIONS
        }
    }
    
    // AMP4 -> AMP5
    // if you have AMP4 but not AMP5 -> attack AMP5
    _minT = 185 $seconds ;
    if (tAMPa5!=tAMPa4) {
        _uOwner = tAMPa4;
        _dest[$Xpos] = 25; _dest[$Ypos] = 150;
        $DEPLOY_MINIONS
    }
    if (tAMPb5!=tAMPb4) {
        _uOwner = tAMPb4;
        _dest[$Xpos] = 195; _dest[$Ypos] = 90;
        $DEPLOY_MINIONS
    }
    
    if(0) {
        // AMPt3 + AMP4 -> AMP1 from AMP4 :
        // if you own AMPt3 + AMP4 -> attack AMP1 from AMP4
        _dest[$Xpos] = 110; _dest[$Ypos] = 120;
        if ((tAMPa4==tAMPa3 || tAMPb4==tAMPa3) && tAMPc1!=tAMPa3) {
            _uOwner = tAMPa3;
            _minX = 0; _maxX = 220;
            _minY = 0; _maxY = 125;
            $DEPLOY_MINIONS
            
            /*_minX = 0; _maxX = 115;
            _minY = 115; _maxY = 240;
            $DEPLOY_MINIONS*/
        }   
        if ((tAMPb3==tAMPb4 || tAMPb3==tAMPa4) && tAMPc1!=tAMPb3) {
            _uOwner = tAMPb3;
            _minX = 0; _maxX = 220;
            _minY = 115; _maxY = 240;
            $DEPLOY_MINIONS
            
            /*_minX = 105; _maxX = 220;
            _minY = 0; _maxY = 125;
            $DEPLOY_MINIONS*/
        }
        
        // battle plan 1 (40%): Attack AMPc1 from AMP3 and AMP4 simultaneously
        // battle plan 2 (10%): Attack AMPc1 from AMP3 while AMP4 attacks AMPt2 and raids AMPt6
        
        // if you have a squad at AMP3 and own AMP4 (a or b) but don't own AMPc1 
        //      -> attack AMPc1
        //      (and sometimes support with troops from AMP4 too)
        _dest[$Xpos] = 110; _dest[$Ypos] = 120;
        if ((tAMPa3==tAMPa4 || tAMPa3==tAMPb4) && tAMPc1!=tAMPa3) {
            _uOwner = tAMPa3;
            _minX = 0; _maxX = 220;
            _minY = 0; _maxY = 125;
            $DEPLOY_MINIONS
            
            /*_minX = 0; _maxX = 115;
            _minY = 115; _maxY = 240;
            $DEPLOY_MINIONS*/
        }   
        if ((tAMPb3==tAMPb4 || tAMPb3==tAMPa4) && tAMPc1!=tAMPb3) {
            _uOwner = tAMPb3;
            _minX = 0; _maxX = 220;
            _minY = 115; _maxY = 240;
            $DEPLOY_MINIONS
            
            /*_minX = 105; _maxX = 220;
            _minY = 0; _maxY = 125;
            $DEPLOY_MINIONS*/
        }
        
        
        // invading hostile territory
        //---------------------------------
        _uOwner = tAMPc1;
        // if you have a squad at AMP3 and own AMPc1 -> attack AMPt4
        if (tAMPa3==tAMPc1 && tAMPb4!=tAMPc1) {
            _minX = 0; _maxX = 220;
            _minY = 0; _maxY = 115;
            _dest[$Xpos] = 160; _dest[$Ypos] = 100;
            $DEPLOY_MINIONS
        }
        if (tAMPb3==tAMPc1 && tAMPa4!=tAMPc1) {
            _minX = 0; _maxX = 220;
            _minY = 125; _maxY = 240;
            _dest[$Xpos] = 60; _dest[$Ypos] = 140;
            $DEPLOY_MINIONS
        }

        // if you have a squad at AMP4 and own AMPc1 -> attack AMPt3
        if (tAMPa4==tAMPc1 && tAMPb3!=tAMPc1) {
            _minX = 0; _maxX = 115;
            _minY = 115; _maxY = 240;
            _dest[$Xpos] = 110; _dest[$Ypos] = 160;
            $DEPLOY_MINIONS
        }
        if (tAMPb4==tAMPc1 && tAMPa3!=tAMPc1) {
            _minX = 105; _maxX = 220;
            _minY = 0; _maxY = 125;
            _dest[$Xpos] = 110; _dest[$Ypos] = 80;
            $DEPLOY_MINIONS
        }
        
        // if you have a squad at AMP4 and own AMPc1 but not AMP3 -> attack AMP3
        if (tAMPa4==tAMPc1 && tAMPa3!=tAMPc1) {
            _minX = 105; _maxX = 220;
            _minY = 0; _maxY = 125;
            _dest[$Xpos] = 110; _dest[$Ypos] = 80;
            $DEPLOY_MINIONS
        }
        if (tAMPb4==tAMPc1 && tAMPb3!=tAMPc1) {
            _minX = 0; _maxX = 115;
            _minY = 115; _maxY = 240;
            _dest[$Xpos] = 110; _dest[$Ypos] = 160;
            $DEPLOY_MINIONS
        }
    }
}


// End Game maneuvers
/********************************
    Finishing the game when a player controls AMPc1, AMP3, AMPt3, AMP4, and AMPt4:
    1. The defending player should mass on their remaining choke points
    2. the attacking player should gently but persistently poke the remaining AMPs
        until they win or the opponent breaks out
*/
if (1) {
    _maxM = 30 $seconds; 
    if ( !(tAMPa3==tAMPc1 && tAMPb3==tAMPc1 && tAMPa4==tAMPc1 && tAMPb4==tAMPc1) ) PERFORM NOTHING;

    _uOwner = -1;
    _minT = 312 $seconds ; _maxT = 2400 $seconds ;
    _everyT = 67 $seconds; _recruit = 4;

    if (tAMPa1!=tAMPc1) {
        // defender mass at 60,110
        _uOwner = tAMPa1;
        _minX = 0; _maxX = 60;
        _minY = 0; _maxY = 120;
        _dest[$Xpos] = 60; _dest[$Ypos] = 110;
        $DEPLOY_MINIONS
        
        // attacker poke AMP1
        _uOwner = tAMPc1;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 30; _dest[$Ypos] = 110;
        $DEPLOY_MINIONS
    }
    if (tAMPb1!=tAMPc1) {
        // defender mass at 160,130
        _uOwner = tAMPb1;
        _minX = 160; _maxX = 220;
        _minY = 120; _maxY = 240;
        _dest[$Xpos] = 160; _dest[$Ypos] = 130;
        $DEPLOY_MINIONS
        
        // attacker poke AMP1
        _uOwner = tAMPc1;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 190; _dest[$Ypos] = 130;
        $DEPLOY_MINIONS
    }

    if (tAMPa2!=tAMPc1) {
        // defender mass at 75,35
        _uOwner = tAMPa2;
        _minX = 0; _maxX = 110;
        _minY = 0; _maxY = 70;
        _dest[$Xpos] = 75; _dest[$Ypos] = 35;
        $DEPLOY_MINIONS
        
        // attacker poke AMP1
        _uOwner = tAMPc1;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 75; _dest[$Ypos] = 25;
        $DEPLOY_MINIONS
    }
    if (tAMPb2!=tAMPc1) {
        // defender mass at 145,205
        _uOwner = tAMPb2;
        _minX = 110; _maxX = 220;
        _minY = 170; _maxY = 240;
        _dest[$Xpos] = 145; _dest[$Ypos] = 205;
        $DEPLOY_MINIONS
        
        // attacker poke AMP1
        _uOwner = tAMPc1;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 145; _dest[$Ypos] = 215;
        $DEPLOY_MINIONS
    }

    _minX = 0; _maxX = 220;
    _minY = 0; _maxY = 240;
    if (tAMPa5!=tAMPc1) {    
        // attacker poke AMP5
        _uOwner = tAMPc1;
        _dest[$Xpos] = 25; _dest[$Ypos] = 150;
        $DEPLOY_MINIONS
    }
    if (tAMPb5!=tAMPc1) {    
        // attacker poke AMP5
        _uOwner = tAMPc1;
        _dest[$Xpos] = 195; _dest[$Ypos] = 90;
        $DEPLOY_MINIONS
    }

    if (tAMPa6!=tAMPc1) {
        // defender mass at 140,50
        _uOwner = tAMPa6;
        _minX = 140; _maxX = 220;
        _minY = 0; _maxY = 50;
        _dest[$Xpos] = 140; _dest[$Ypos] = 50;
        $DEPLOY_MINIONS
        
        // attacker poke AMP6
        _uOwner = tAMPc1;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 130; _dest[$Ypos] = 30;
        $DEPLOY_MINIONS
    }
    if (tAMPb6!=tAMPc1) {
        // defender mass at 80,190
        _uOwner = tAMPb6;
        _minX = 0; _maxX = 80;
        _minY = 190; _maxY = 240;
        _dest[$Xpos] = 80; _dest[$Ypos] = 190;
        $DEPLOY_MINIONS
        
        // attacker poke AMP6
        _uOwner = tAMPc1;
        _minX = 0; _maxX = 220;
        _minY = 0; _maxY = 240;
        _dest[$Xpos] = 90; _dest[$Ypos] = 210;
        $DEPLOY_MINIONS
    }

    // AMP1 breakout is already handled by attack vectors

}


// Raiding & AMP poking
//*******************************
if (0) {
    _everyT = 40 $seconds; _recruit = 2;
    _minX = 0; _maxX = 220;
    _minY = 0; _maxY = 240;
    
    // if you have AMP1 and AMP3 but not AMP2 -> grab AMP2
    if (tAMPa1==tAMPa3 && tAMPa2!=tAMPa3) {
        _uOwner = tAMPa3;
        _dest[$Xpos] = 75; _dest[$Ypos] = 25;
        $DEPLOY_MINIONS
    }
    if (tAMPb1==tAMPb3 && tAMPb2!=tAMPb3) {
        _uOwner = tAMPb3;
        _dest[$Xpos] = 145; _dest[$Ypos] = 215;
        $DEPLOY_MINIONS
    }
    // if you have AMP2 and AMP4 but not AMP1 -> grab AMP1
    if (tAMPa2==tAMPa4 && tAMPa1!=tAMPa4) {
        _uOwner = tAMPa4;
        _dest[$Xpos] = 30; _dest[$Ypos] = 110;
        $DEPLOY_MINIONS
    }
    if (tAMPb2==tAMPb4 && tAMPb1!=tAMPb4) {
        _uOwner = tAMPb4;
        _dest[$Xpos] = 190; _dest[$Ypos] = 130;
        $DEPLOY_MINIONS
    }
    
    _recruit = 4;
    // if you have AMP2 but not AMP1 -> raid AMP1 via the main base
    // if you have AMP6 but not AMPt2 -> raid AMPt2
    // if you have AMP4 but not AMP5 -> raid AMP5
    if (tAMPa5!=tAMPa4) {
        _uOwner = tAMPa4;
        _dest[$Xpos] = 25; _dest[$Ypos] = 150;
        $DEPLOY_MINIONS
    }
    if (tAMPb5!=tAMPb4) {
        _uOwner = tAMPb4;
        _dest[$Xpos] = 195; _dest[$Ypos] = 90;
        $DEPLOY_MINIONS
    }
    
    // if you have AMP4 but not AMPt6 -> raid the AMPt6 expo and AMP
    // if you have AMP3 but not AMP6 -> raid the AMP6 expo and AMP
    // if you have AMP3 and AMP6 but not AMPt4 -> raid AMPt5 and AMPt4 via the corner
}


